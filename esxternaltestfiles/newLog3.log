commit d2d9c4a9a871b78876ba742816cb74909fffdfa1
Author: saif-laptop\Saif <sumahmud33@gmaill.com>
Date:   Tue Jan 30 17:41:51 2018 +0600

    new commit 3

diff --git a/newLog22.log b/newLog22.log
new file mode 100644
index 0000000..b59e3e1
--- /dev/null
+++ b/newLog22.log
@@ -0,0 +1,2363 @@
+commit 4817306221cf279487a8d5d145e298f8c8f2a500
+Author: saif-laptop\Saif <sumahmud33@gmaill.com>
+Date:   Tue Jan 30 17:36:32 2018 +0600
+
+    new commit 2
+
+diff --git a/newLog11.log b/newLog11.log
+new file mode 100644
+index 0000000..11db22e
+--- /dev/null
++++ b/newLog11.log
+@@ -0,0 +1,1551 @@
++commit 21ff802c5cc4ea14d0806374934605505ef91937
++Author: saif-laptop\Saif <sumahmud33@gmaill.com>
++Date:   Tue Jan 30 17:33:04 2018 +0600
++
++    new commit
++
++diff --git a/newLog.log b/newLog.log
++deleted file mode 100644
++index c8d58b6..0000000
++--- a/newLog.log
+++++ /dev/null
++@@ -1,752 +0,0 @@
++-commit d521c86e080891563773e803efa24422f063efea
++-Author: saif-laptop\Saif <sumahmud33@gmaill.com>
++-Date:   Tue Jan 30 17:28:07 2018 +0600
++-
++-    Changed
++-
++-diff --git a/log.log b/log.log
++-new file mode 100644
++-index 0000000..0368713
++---- /dev/null
++-+++ b/log.log
++-@@ -0,0 +1,301 @@
++-+commit 8a8b7c5dc3fa8df8794e0815f42e7045e1c10e6a
++-+Author: Saif Uddin Mahmud <sumahmud33@gmail.com>
++-+Date:   Sun Nov 29 13:42:34 2015 +0600
++-+
++-+    Initial commit
++-+
++-+diff --git a/.classpath b/.classpath
++-+new file mode 100644
++-+index 0000000..91ee9a5
++-+--- /dev/null
++-++++ b/.classpath
++-+@@ -0,0 +1,6 @@
++-++<?xml version="1.0" encoding="UTF-8"?>
++-++<classpath>
++-++	<classpathentry kind="src" path="src"/>
++-++	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
++-++	<classpathentry kind="output" path="bin"/>
++-++</classpath>
++-+diff --git a/.gitignore b/.gitignore
++-+new file mode 100644
++-+index 0000000..ae3c172
++-+--- /dev/null
++-++++ b/.gitignore
++-+@@ -0,0 +1 @@
++-++/bin/
++-+diff --git a/.project b/.project
++-+new file mode 100644
++-+index 0000000..2d4065e
++-+--- /dev/null
++-++++ b/.project
++-+@@ -0,0 +1,17 @@
++-++<?xml version="1.0" encoding="UTF-8"?>
++-++<projectDescription>
++-++	<name>AI_Assignment</name>
++-++	<comment></comment>
++-++	<projects>
++-++	</projects>
++-++	<buildSpec>
++-++		<buildCommand>
++-++			<name>org.eclipse.jdt.core.javabuilder</name>
++-++			<arguments>
++-++			</arguments>
++-++		</buildCommand>
++-++	</buildSpec>
++-++	<natures>
++-++		<nature>org.eclipse.jdt.core.javanature</nature>
++-++	</natures>
++-++</projectDescription>
++-+diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
++-+new file mode 100644
++-+index 0000000..838bd9d
++-+--- /dev/null
++-++++ b/.settings/org.eclipse.jdt.core.prefs
++-+@@ -0,0 +1,11 @@
++-++eclipse.preferences.version=1
++-++org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
++-++org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
++-++org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
++-++org.eclipse.jdt.core.compiler.compliance=1.7
++-++org.eclipse.jdt.core.compiler.debug.lineNumber=generate
++-++org.eclipse.jdt.core.compiler.debug.localVariable=generate
++-++org.eclipse.jdt.core.compiler.debug.sourceFile=generate
++-++org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
++-++org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
++-++org.eclipse.jdt.core.compiler.source=1.7
++-+diff --git a/src/ai/dls/DLSMain.java b/src/ai/dls/DLSMain.java
++-+new file mode 100644
++-+index 0000000..6088ab9
++-+--- /dev/null
++-++++ b/src/ai/dls/DLSMain.java
++-+@@ -0,0 +1,112 @@
++-++package ai.dls;
++-++
++-++import java.util.ArrayList;
++-++import java.util.List;
++-++
++-++public class DLSMain {
++-++	
++-++	public static void main(String[] args){
++-++		//Bucharest
++-++		Node bucharest = new Node("Bucharest", null);
++-++		
++-++		
++-++		//Pitesti and its children
++-++		List<Node> pitestiChildren = new ArrayList<Node>();
++-++		pitestiChildren.add(bucharest);
++-++		
++-++		Node pitesti = new Node("Pitesti", pitestiChildren);
++-++		
++-++		
++-++		//Fagaras and its children
++-++		List<Node> fagarasChildren = new ArrayList<Node>();
++-++		fagarasChildren.add(bucharest);
++-++			
++-++		Node fagaras = new Node("Fagaras", fagarasChildren);
++-++		
++-++		//Craiova and its children
++-++		List<Node> craiovaChildren = new ArrayList<Node>();
++-++		craiovaChildren.add(pitesti);
++-++				
++-++		Node craiova = new Node("Craiova", craiovaChildren);
++-++		
++-++		
++-++		
++-++		//Riminicu and its children
++-++		List<Node> rimnicuChildren = new ArrayList<Node>();
++-++		rimnicuChildren.add(pitesti);
++-++		rimnicuChildren.add(craiova);
++-++				
++-++		Node rimnicuVilcea = new Node("Rimnicu Vilcea", rimnicuChildren);
++-++
++-++		
++-++		//Sibiu and its children
++-++		List<Node> sibiuChildren = new ArrayList<Node>();
++-++		sibiuChildren.add(fagaras);
++-++		sibiuChildren.add(rimnicuVilcea);
++-++				
++-++		Node sibiu = new Node("Sibiu", sibiuChildren);
++-++		
++-++		//Drobeta and its children
++-++		List<Node> drobetaChildren = new ArrayList<Node>();
++-++		drobetaChildren.add(craiova);
++-++				
++-++		Node drobeta = new Node("Drobeta", drobetaChildren);
++-++
++-++		//Mahadia and its children
++-++		List<Node> mahadiaChildren = new ArrayList<Node>();
++-++		mahadiaChildren.add(drobeta);
++-++				
++-++		Node mahadia = new Node("Mahadia", mahadiaChildren);
++-++
++-++		
++-++		//Lugoj and its children
++-++		List<Node> lugojChildren = new ArrayList<Node>();
++-++		lugojChildren.add(mahadia);
++-++				
++-++		Node lugoj = new Node("Lugoj", lugojChildren);
++-++		
++-++		
++-++		//Timisoara and its children
++-++		List<Node> timisoaraChildren = new ArrayList<Node>();
++-++		timisoaraChildren.add(lugoj);
++-++		
++-++		Node timisoara = new Node("Timisoara", timisoaraChildren);
++-++		
++-++		
++-++		//Oradea and its children
++-++		List<Node> oradeaChildren = new ArrayList<Node>();
++-++		oradeaChildren.add(sibiu);
++-++			
++-++		Node oradea = new Node("Oradea", oradeaChildren);
++-++		
++-++		//Zerind and its children
++-++		List<Node> zerindChildren = new ArrayList<Node>();
++-++		zerindChildren.add(oradea);
++-++				
++-++		Node zerind = new Node("Zerind", zerindChildren);
++-++		
++-++		
++-++		
++-++		//Arad and its children
++-++		List<Node> aradChildren = new ArrayList<Node>();
++-++		aradChildren.add(zerind);
++-++		aradChildren.add(timisoara);
++-++		aradChildren.add(sibiu);
++-++				
++-++		Node arad = new Node("Arad", aradChildren);
++-++
++-++		DepthLimitedSearch dls = new DepthLimitedSearch(arad, 3);
++-++		
++-++		dls.DLS(arad, bucharest, 3);
++-++		
++-++		if(dls.getIsFound()){
++-++			System.out.println(bucharest.getCityName() + " found at depth " + dls.getGoalDepth());
++-++			System.out.println("Visited Nodes: " + dls.getVisitedNodes());
++-++			System.out.println("Goal path: " + dls.getGoalPath());
++-++		} else{
++-++			System.err.println(bucharest.getCityName() + " not found within depth limit.");
++-++		}
++-++	
++-++	}
++-++	
++-++}
++-+diff --git a/src/ai/dls/DepthLimitedSearch.java b/src/ai/dls/DepthLimitedSearch.java
++-+new file mode 100644
++-+index 0000000..58f596d
++-+--- /dev/null
++-++++ b/src/ai/dls/DepthLimitedSearch.java
++-+@@ -0,0 +1,74 @@
++-++package ai.dls;
++-++
++-++import java.util.ArrayList;
++-++import java.util.List;
++-++import java.util.Stack;
++-++
++-++public class DepthLimitedSearch {
++-++	private final List<Node> listVisitedNodes = new ArrayList<Node>();
++-++	private boolean isFound = false;
++-++	private int limit, goalDeapth;
++-++	private Node startNode;
++-++	
++-+-	public boolean getIsFound(){
++-++	public boolean getIsFound(boolean found){
++-++		return isFound;
++-++	}
++-++
++-+-	public void setIsFound(boolean isFound, String testString) {
++-++	public void setIsFound(boolean isFound) {
++-++		this.isFound = isFound;
++-++	}
++-++	
++-++	public DepthLimitedSearch(Node startNode, int limit){
++-++		this.limit = limit;
++-++		this.startNode = startNode;
++-++	}
++-++	
++-++	public String getVisitedNodes(){
++-++		String visitedNodes = "";
++-++		for(Node nodes:listVisitedNodes){
++-++			visitedNodes += nodes.getCityName() + ", ";
++-++		}
++-++		
++-++		return visitedNodes.trim().substring(0, visitedNodes.length()-2);
++-++	}
++-++	
++-++	public String getGoalPath(){
++-++		Stack<String> path = new Stack<String>();
++-++		for(int i = 1; i<= goalDeapth; i++){
++-++			path.push(listVisitedNodes.get(listVisitedNodes.size()-i).getCityName());
++-++			
++-++		}
++-++	
++-++		path.push(startNode.getCityName());
++-++		String goalPath = "";
++-++			while(!path.isEmpty()){
++-++				goalPath += path.pop() + ", "; 
++-++			}
++-++			
++-++		return goalPath.trim().substring(0, goalPath.length() - 1);
++-++	}
++-++	
++-++	public int getGoalDepth(){
++-++		return goalDeapth;
++-++	}
++-++	
++-++	public DepthLimitedSearch(){
++-++		
++-++	}
++-++	
++-++	public void DLS(Node current, Node goal, int depth){
++-++		if(depth >= 0 && getIsFound() == false){
++-++			if(current.equals(goal)){
++-++				listVisitedNodes.add(current);
++-++				goalDeapth = (limit -depth);
++-++				setIsFound(true);
++-++			} else{
++-++				listVisitedNodes.add(current);
++-++				for(Node child: current.getChidlNode()){
++-++					DLS(child, goal, depth - 1);
++-++				}
++-++			}
++-++		}
++-++	}
++-++	
++-++}
++-+diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
++-+new file mode 100644
++-+index 0000000..6e6766c
++-+--- /dev/null
++-++++ b/src/ai/dls/Node.java
++-+@@ -0,0 +1,30 @@
++-++package ai.dls;
++-++
++-++import java.util.List;
++-++
++-++public class Node {
++-++	private String cityName;
++-++	private List<Node> chidlNode;
++-++	
++-++	public Node(String cityName, List<Node> children){
++-++		this.cityName = cityName;
++-++		this.chidlNode = children;
++-++	}
++-++
++-++	public String getCityName() {
++-++		return cityName;
++-++	}
++-++
++-++	public void setCityName(String cityName) {
++-++		this.cityName = cityName;
++-++	}
++-++
++-++	public List<Node> getChidlNode() {
++-++		return chidlNode;
++-++	}
++-++
++-++	public void setChidlNode(List<Node> chidlNode) {
++-++		this.chidlNode = chidlNode;
++-++	}
++-++	
++-++}
++-diff --git a/src/ai/dls/MethodFinder.java b/src/ai/dls/MethodFinder.java
++-new file mode 100644
++-index 0000000..5a9f961
++---- /dev/null
++-+++ b/src/ai/dls/MethodFinder.java
++-@@ -0,0 +1,112 @@
++-+package ai.dls;
++-+import java.io.BufferedReader;
++-+import java.io.FileNotFoundException;
++-+import java.io.FileReader;
++-+import java.io.IOException;
++-+import java.util.ArrayList;
++-+import java.util.List;
++-+import java.util.StringTokenizer;
++-+
++-+public class MethodFinder {
++-+	
++-+	private String inputFileName;
++-+	
++-+	public String getInputFileName() {
++-+		return inputFileName;
++-+	}
++-+		
++-+	public void setInputFileName(String inputFileName) {
++-+		this.inputFileName = inputFileName;
++-+	}
++-+	
++-+	public void getParamListChangedMethods(List<String> methodSignatureList) {
++-+
++-+		for (int i = 0; i < methodSignatureList.size(); i++) {
++-+			// old and new signatures are consequently and so i-->old and i+1-->new
++-+			String oldSignature = extractMethodSignature(methodSignatureList.get(i));
++-+			String newSignature = extractMethodSignature(methodSignatureList.get(++i));
++-+
++-+			String bareSpaceOldSignature = removeWhiteSpace(oldSignature);
++-+			String bareSpaceNewSignature = removeWhiteSpace(newSignature);
++-+
++-+			if (compareOldAndNewSignatures(bareSpaceOldSignature, bareSpaceNewSignature)) {
++-+				System.out.println("Old: " + oldSignature + "\t New:" + newSignature);
++-+			}
++-+		}
++-+	}
++-+	
++-+	
++-+	/** helper for get a list of methods (in pairs) that have changes in signatures**/
++-+	private List<String> getMethodSignatureChangeLog(String inputFileName, int x) {
++-+		//Used a regex from https://stackoverflow.com/questions/68633/regex-that-will-match-a-java-method-declaration;
++-+		String pattern = ".[\\-\\+][ \\t]*(?:(?:public|protected|private)\\s+)?"+
++-+				"(?:(static|final|native|synchronized|abstract|threadsafe|transient|"+
++-+				"(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>)|(?:<[^<]*<["+
++-+				"^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))\\s+){0,}(?!return)\\b([\\w.]+)\\b"+
++-+				"(?:|(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>)|(?:<[^<]*"+
++-+				"<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))((?:\\[\\]){0,})\\s+\\b\\w+"+
++-+				"\\b\\s*\\(\\s*(?:\\b([\\w.]+)\\b(?:|(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+"+
++-+				">[^>]*>)|(?:<[^<]*<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))((?:\\[\\]){0,})(\\.\\.\\.)?\\s+"+
++-+				"(\\w+)\\b(?![>\\[])\\s*(?:,\\s+\\b([\\w.]+)\\b(?:|(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+"+
++-+				">[^>]*>)|(?:<[^<]*<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))((?:\\[\\]){0,})(\\.\\.\\.)?\\s+"+
++-+				"(\\w+)\\b(?![>\\[])\\s*){0,})?\\s*\\)(?:\\s*throws [\\w.]+(\\s*,\\s*[\\w.]+))?\\s*(?:\\{|;)[ \\t]*$";
++-+		
++-+		List<String> methodSignatureList = new ArrayList<String>();
++-+		
++-+		try {
++-+			BufferedReader bReader = new BufferedReader(new FileReader(inputFileName));
++-+			String line = "";
++-+			
++-+			while ((line = bReader.readLine()) != null) {
++-+				
++-+				if(line.matches(pattern)) {
++-+					System.out.println(line);
++-+					methodSignatureList.add(line);
++-+				}
++-+			}
++-+		} catch (FileNotFoundException e ){
++-+		
++-+			e.printStackTrace();
++-+		} catch (IOException e)  {
++-+			e.printStackTrace();
++-+		}
++-+		
++-+		return methodSignatureList;
++-+	}//end of getMethodSignatureChangeLog
++-+	
++-+	
++-+	/**helper method for extracting Method Signatures from a given line**/
++-+	private String extractMethodSignature(String methodSignature) {
++-+		//RegularExpression for white space
++-+		return methodSignature.substring(3, methodSignature.length()-1);
++-+	}
++-+	
++-+	/**helper method for removing white spaces from the signature line**/
++-+	private String removeWhiteSpace(String methodSignature) {
++-+		return methodSignature.replaceAll("\\s+","");
++-+	}
++-+
++-+	/** helper for checking if the old and new signatures are same of not**/
++-+	private boolean compareOldAndNewSignatures(String bareSpaceOldSignature, String bareSpaceNewSignature) {
++-+		StringTokenizer tokensOfOldSignature = new StringTokenizer(bareSpaceOldSignature, "(");
++-+		StringTokenizer tokensOfNewSignature = new StringTokenizer(bareSpaceNewSignature, "(");
++-+		
++-+		return tokensOfOldSignature.nextToken().equals(tokensOfNewSignature.nextToken());
++-+	}
++-+	
++-+	
++-+	/*** Constructor for Testing (otherwise some methods need to be static to be called by the main method)**/
++-+	public MethodFinder() {
++-+		this.inputFileName="";
++-+		
++-+	}
++-+	
++-+	
++-+	/***Main method for testing***/
++-+	public static void main(String args[]) {
++-+		MethodFinder mf = new MethodFinder();
++-+		mf.setInputFileName("./esxternaltestfiles/changelog.txt"); //input your log file
++-+		mf.getParamListChangedMethods(mf.getMethodSignatureChangeLog(mf.getInputFileName(), 0));
++-+	}
++-+
++-+}
++-diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
++-index 6e6766c..0623b3d 100644
++---- a/src/ai/dls/Node.java
++-+++ b/src/ai/dls/Node.java
++-@@ -5,6 +5,7 @@ import java.util.List;
++- public class Node {
++- 	private String cityName;
++- 	private List<Node> chidlNode;
++-+	int x;
++- 	
++- 	public Node(String cityName, List<Node> children){
++- 		this.cityName = cityName;
++-@@ -23,7 +24,7 @@ public class Node {
++- 		return chidlNode;
++- 	}
++- 
++--	public void setChidlNode(List<Node> chidlNode) {
++-+	public void setChidlNode(List<Node> chidlNode, int x) {
++- 		this.chidlNode = chidlNode;
++- 	}
++- 	
++-
++-commit 8a8b7c5dc3fa8df8794e0815f42e7045e1c10e6a
++-Author: Saif Uddin Mahmud <sumahmud33@gmail.com>
++-Date:   Sun Nov 29 13:42:34 2015 +0600
++-
++-    Initial commit
++-
++-diff --git a/.classpath b/.classpath
++-new file mode 100644
++-index 0000000..91ee9a5
++---- /dev/null
++-+++ b/.classpath
++-@@ -0,0 +1,6 @@
++-+<?xml version="1.0" encoding="UTF-8"?>
++-+<classpath>
++-+	<classpathentry kind="src" path="src"/>
++-+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
++-+	<classpathentry kind="output" path="bin"/>
++-+</classpath>
++-diff --git a/.gitignore b/.gitignore
++-new file mode 100644
++-index 0000000..ae3c172
++---- /dev/null
++-+++ b/.gitignore
++-@@ -0,0 +1 @@
++-+/bin/
++-diff --git a/.project b/.project
++-new file mode 100644
++-index 0000000..2d4065e
++---- /dev/null
++-+++ b/.project
++-@@ -0,0 +1,17 @@
++-+<?xml version="1.0" encoding="UTF-8"?>
++-+<projectDescription>
++-+	<name>AI_Assignment</name>
++-+	<comment></comment>
++-+	<projects>
++-+	</projects>
++-+	<buildSpec>
++-+		<buildCommand>
++-+			<name>org.eclipse.jdt.core.javabuilder</name>
++-+			<arguments>
++-+			</arguments>
++-+		</buildCommand>
++-+	</buildSpec>
++-+	<natures>
++-+		<nature>org.eclipse.jdt.core.javanature</nature>
++-+	</natures>
++-+</projectDescription>
++-diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
++-new file mode 100644
++-index 0000000..838bd9d
++---- /dev/null
++-+++ b/.settings/org.eclipse.jdt.core.prefs
++-@@ -0,0 +1,11 @@
++-+eclipse.preferences.version=1
++-+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
++-+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
++-+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
++-+org.eclipse.jdt.core.compiler.compliance=1.7
++-+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
++-+org.eclipse.jdt.core.compiler.debug.localVariable=generate
++-+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
++-+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
++-+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
++-+org.eclipse.jdt.core.compiler.source=1.7
++-diff --git a/src/ai/dls/DLSMain.java b/src/ai/dls/DLSMain.java
++-new file mode 100644
++-index 0000000..6088ab9
++---- /dev/null
++-+++ b/src/ai/dls/DLSMain.java
++-@@ -0,0 +1,112 @@
++-+package ai.dls;
++-+
++-+import java.util.ArrayList;
++-+import java.util.List;
++-+
++-+public class DLSMain {
++-+	
++-+	public static void main(String[] args){
++-+		//Bucharest
++-+		Node bucharest = new Node("Bucharest", null);
++-+		
++-+		
++-+		//Pitesti and its children
++-+		List<Node> pitestiChildren = new ArrayList<Node>();
++-+		pitestiChildren.add(bucharest);
++-+		
++-+		Node pitesti = new Node("Pitesti", pitestiChildren);
++-+		
++-+		
++-+		//Fagaras and its children
++-+		List<Node> fagarasChildren = new ArrayList<Node>();
++-+		fagarasChildren.add(bucharest);
++-+			
++-+		Node fagaras = new Node("Fagaras", fagarasChildren);
++-+		
++-+		//Craiova and its children
++-+		List<Node> craiovaChildren = new ArrayList<Node>();
++-+		craiovaChildren.add(pitesti);
++-+				
++-+		Node craiova = new Node("Craiova", craiovaChildren);
++-+		
++-+		
++-+		
++-+		//Riminicu and its children
++-+		List<Node> rimnicuChildren = new ArrayList<Node>();
++-+		rimnicuChildren.add(pitesti);
++-+		rimnicuChildren.add(craiova);
++-+				
++-+		Node rimnicuVilcea = new Node("Rimnicu Vilcea", rimnicuChildren);
++-+
++-+		
++-+		//Sibiu and its children
++-+		List<Node> sibiuChildren = new ArrayList<Node>();
++-+		sibiuChildren.add(fagaras);
++-+		sibiuChildren.add(rimnicuVilcea);
++-+				
++-+		Node sibiu = new Node("Sibiu", sibiuChildren);
++-+		
++-+		//Drobeta and its children
++-+		List<Node> drobetaChildren = new ArrayList<Node>();
++-+		drobetaChildren.add(craiova);
++-+				
++-+		Node drobeta = new Node("Drobeta", drobetaChildren);
++-+
++-+		//Mahadia and its children
++-+		List<Node> mahadiaChildren = new ArrayList<Node>();
++-+		mahadiaChildren.add(drobeta);
++-+				
++-+		Node mahadia = new Node("Mahadia", mahadiaChildren);
++-+
++-+		
++-+		//Lugoj and its children
++-+		List<Node> lugojChildren = new ArrayList<Node>();
++-+		lugojChildren.add(mahadia);
++-+				
++-+		Node lugoj = new Node("Lugoj", lugojChildren);
++-+		
++-+		
++-+		//Timisoara and its children
++-+		List<Node> timisoaraChildren = new ArrayList<Node>();
++-+		timisoaraChildren.add(lugoj);
++-+		
++-+		Node timisoara = new Node("Timisoara", timisoaraChildren);
++-+		
++-+		
++-+		//Oradea and its children
++-+		List<Node> oradeaChildren = new ArrayList<Node>();
++-+		oradeaChildren.add(sibiu);
++-+			
++-+		Node oradea = new Node("Oradea", oradeaChildren);
++-+		
++-+		//Zerind and its children
++-+		List<Node> zerindChildren = new ArrayList<Node>();
++-+		zerindChildren.add(oradea);
++-+				
++-+		Node zerind = new Node("Zerind", zerindChildren);
++-+		
++-+		
++-+		
++-+		//Arad and its children
++-+		List<Node> aradChildren = new ArrayList<Node>();
++-+		aradChildren.add(zerind);
++-+		aradChildren.add(timisoara);
++-+		aradChildren.add(sibiu);
++-+				
++-+		Node arad = new Node("Arad", aradChildren);
++-+
++-+		DepthLimitedSearch dls = new DepthLimitedSearch(arad, 3);
++-+		
++-+		dls.DLS(arad, bucharest, 3);
++-+		
++-+		if(dls.getIsFound()){
++-+			System.out.println(bucharest.getCityName() + " found at depth " + dls.getGoalDepth());
++-+			System.out.println("Visited Nodes: " + dls.getVisitedNodes());
++-+			System.out.println("Goal path: " + dls.getGoalPath());
++-+		} else{
++-+			System.err.println(bucharest.getCityName() + " not found within depth limit.");
++-+		}
++-+	
++-+	}
++-+	
++-+}
++-diff --git a/src/ai/dls/DepthLimitedSearch.java b/src/ai/dls/DepthLimitedSearch.java
++-new file mode 100644
++-index 0000000..58f596d
++---- /dev/null
++-+++ b/src/ai/dls/DepthLimitedSearch.java
++-@@ -0,0 +1,74 @@
++-+package ai.dls;
++-+
++-+import java.util.ArrayList;
++-+import java.util.List;
++-+import java.util.Stack;
++-+
++-+public class DepthLimitedSearch {
++-+	private final List<Node> listVisitedNodes = new ArrayList<Node>();
++-+	private boolean isFound = false;
++-+	private int limit, goalDeapth;
++-+	private Node startNode;
++-+	
++-+	public boolean getIsFound(){
++-+		return isFound;
++-+	}
++-+
++-+	public void setIsFound(boolean isFound) {
++-+		this.isFound = isFound;
++-+	}
++-+	
++-+	public DepthLimitedSearch(Node startNode, int limit){
++-+		this.limit = limit;
++-+		this.startNode = startNode;
++-+	}
++-+	
++-+	public String getVisitedNodes(){
++-+		String visitedNodes = "";
++-+		for(Node nodes:listVisitedNodes){
++-+			visitedNodes += nodes.getCityName() + ", ";
++-+		}
++-+		
++-+		return visitedNodes.trim().substring(0, visitedNodes.length()-2);
++-+	}
++-+	
++-+	public String getGoalPath(){
++-+		Stack<String> path = new Stack<String>();
++-+		for(int i = 1; i<= goalDeapth; i++){
++-+			path.push(listVisitedNodes.get(listVisitedNodes.size()-i).getCityName());
++-+			
++-+		}
++-+	
++-+		path.push(startNode.getCityName());
++-+		String goalPath = "";
++-+			while(!path.isEmpty()){
++-+				goalPath += path.pop() + ", "; 
++-+			}
++-+			
++-+		return goalPath.trim().substring(0, goalPath.length() - 1);
++-+	}
++-+	
++-+	public int getGoalDepth(){
++-+		return goalDeapth;
++-+	}
++-+	
++-+	public DepthLimitedSearch(){
++-+		
++-+	}
++-+	
++-+	public void DLS(Node current, Node goal, int depth){
++-+		if(depth >= 0 && getIsFound() == false){
++-+			if(current.equals(goal)){
++-+				listVisitedNodes.add(current);
++-+				goalDeapth = (limit -depth);
++-+				setIsFound(true);
++-+			} else{
++-+				listVisitedNodes.add(current);
++-+				for(Node child: current.getChidlNode()){
++-+					DLS(child, goal, depth - 1);
++-+				}
++-+			}
++-+		}
++-+	}
++-+	
++-+}
++-diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
++-new file mode 100644
++-index 0000000..6e6766c
++---- /dev/null
++-+++ b/src/ai/dls/Node.java
++-@@ -0,0 +1,30 @@
++-+package ai.dls;
++-+
++-+import java.util.List;
++-+
++-+public class Node {
++-+	private String cityName;
++-+	private List<Node> chidlNode;
++-+	
++-+	public Node(String cityName, List<Node> children){
++-+		this.cityName = cityName;
++-+		this.chidlNode = children;
++-+	}
++-+
++-+	public String getCityName() {
++-+		return cityName;
++-+	}
++-+
++-+	public void setCityName(String cityName) {
++-+		this.cityName = cityName;
++-+	}
++-+
++-+	public List<Node> getChidlNode() {
++-+		return chidlNode;
++-+	}
++-+
++-+	public void setChidlNode(List<Node> chidlNode) {
++-+		this.chidlNode = chidlNode;
++-+	}
++-+	
++-+}
++
++commit f87d48117d00b40559da5cc84fc0bd17f0298d62
++Author: saif-laptop\Saif <sumahmud33@gmaill.com>
++Date:   Tue Jan 30 17:30:48 2018 +0600
++
++    Changed ee
++
++diff --git a/newLog.log b/newLog.log
++new file mode 100644
++index 0000000..c8d58b6
++--- /dev/null
+++++ b/newLog.log
++@@ -0,0 +1,752 @@
+++commit d521c86e080891563773e803efa24422f063efea
+++Author: saif-laptop\Saif <sumahmud33@gmaill.com>
+++Date:   Tue Jan 30 17:28:07 2018 +0600
+++
+++    Changed
+++
+++diff --git a/log.log b/log.log
+++new file mode 100644
+++index 0000000..0368713
+++--- /dev/null
++++++ b/log.log
+++@@ -0,0 +1,301 @@
++++commit 8a8b7c5dc3fa8df8794e0815f42e7045e1c10e6a
++++Author: Saif Uddin Mahmud <sumahmud33@gmail.com>
++++Date:   Sun Nov 29 13:42:34 2015 +0600
++++
++++    Initial commit
++++
++++diff --git a/.classpath b/.classpath
++++new file mode 100644
++++index 0000000..91ee9a5
++++--- /dev/null
+++++++ b/.classpath
++++@@ -0,0 +1,6 @@
+++++<?xml version="1.0" encoding="UTF-8"?>
+++++<classpath>
+++++	<classpathentry kind="src" path="src"/>
+++++	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
+++++	<classpathentry kind="output" path="bin"/>
+++++</classpath>
++++diff --git a/.gitignore b/.gitignore
++++new file mode 100644
++++index 0000000..ae3c172
++++--- /dev/null
+++++++ b/.gitignore
++++@@ -0,0 +1 @@
+++++/bin/
++++diff --git a/.project b/.project
++++new file mode 100644
++++index 0000000..2d4065e
++++--- /dev/null
+++++++ b/.project
++++@@ -0,0 +1,17 @@
+++++<?xml version="1.0" encoding="UTF-8"?>
+++++<projectDescription>
+++++	<name>AI_Assignment</name>
+++++	<comment></comment>
+++++	<projects>
+++++	</projects>
+++++	<buildSpec>
+++++		<buildCommand>
+++++			<name>org.eclipse.jdt.core.javabuilder</name>
+++++			<arguments>
+++++			</arguments>
+++++		</buildCommand>
+++++	</buildSpec>
+++++	<natures>
+++++		<nature>org.eclipse.jdt.core.javanature</nature>
+++++	</natures>
+++++</projectDescription>
++++diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
++++new file mode 100644
++++index 0000000..838bd9d
++++--- /dev/null
+++++++ b/.settings/org.eclipse.jdt.core.prefs
++++@@ -0,0 +1,11 @@
+++++eclipse.preferences.version=1
+++++org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+++++org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+++++org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+++++org.eclipse.jdt.core.compiler.compliance=1.7
+++++org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+++++org.eclipse.jdt.core.compiler.debug.localVariable=generate
+++++org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+++++org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+++++org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+++++org.eclipse.jdt.core.compiler.source=1.7
++++diff --git a/src/ai/dls/DLSMain.java b/src/ai/dls/DLSMain.java
++++new file mode 100644
++++index 0000000..6088ab9
++++--- /dev/null
+++++++ b/src/ai/dls/DLSMain.java
++++@@ -0,0 +1,112 @@
+++++package ai.dls;
+++++
+++++import java.util.ArrayList;
+++++import java.util.List;
+++++
+++++public class DLSMain {
+++++	
+++++	public static void main(String[] args){
+++++		//Bucharest
+++++		Node bucharest = new Node("Bucharest", null);
+++++		
+++++		
+++++		//Pitesti and its children
+++++		List<Node> pitestiChildren = new ArrayList<Node>();
+++++		pitestiChildren.add(bucharest);
+++++		
+++++		Node pitesti = new Node("Pitesti", pitestiChildren);
+++++		
+++++		
+++++		//Fagaras and its children
+++++		List<Node> fagarasChildren = new ArrayList<Node>();
+++++		fagarasChildren.add(bucharest);
+++++			
+++++		Node fagaras = new Node("Fagaras", fagarasChildren);
+++++		
+++++		//Craiova and its children
+++++		List<Node> craiovaChildren = new ArrayList<Node>();
+++++		craiovaChildren.add(pitesti);
+++++				
+++++		Node craiova = new Node("Craiova", craiovaChildren);
+++++		
+++++		
+++++		
+++++		//Riminicu and its children
+++++		List<Node> rimnicuChildren = new ArrayList<Node>();
+++++		rimnicuChildren.add(pitesti);
+++++		rimnicuChildren.add(craiova);
+++++				
+++++		Node rimnicuVilcea = new Node("Rimnicu Vilcea", rimnicuChildren);
+++++
+++++		
+++++		//Sibiu and its children
+++++		List<Node> sibiuChildren = new ArrayList<Node>();
+++++		sibiuChildren.add(fagaras);
+++++		sibiuChildren.add(rimnicuVilcea);
+++++				
+++++		Node sibiu = new Node("Sibiu", sibiuChildren);
+++++		
+++++		//Drobeta and its children
+++++		List<Node> drobetaChildren = new ArrayList<Node>();
+++++		drobetaChildren.add(craiova);
+++++				
+++++		Node drobeta = new Node("Drobeta", drobetaChildren);
+++++
+++++		//Mahadia and its children
+++++		List<Node> mahadiaChildren = new ArrayList<Node>();
+++++		mahadiaChildren.add(drobeta);
+++++				
+++++		Node mahadia = new Node("Mahadia", mahadiaChildren);
+++++
+++++		
+++++		//Lugoj and its children
+++++		List<Node> lugojChildren = new ArrayList<Node>();
+++++		lugojChildren.add(mahadia);
+++++				
+++++		Node lugoj = new Node("Lugoj", lugojChildren);
+++++		
+++++		
+++++		//Timisoara and its children
+++++		List<Node> timisoaraChildren = new ArrayList<Node>();
+++++		timisoaraChildren.add(lugoj);
+++++		
+++++		Node timisoara = new Node("Timisoara", timisoaraChildren);
+++++		
+++++		
+++++		//Oradea and its children
+++++		List<Node> oradeaChildren = new ArrayList<Node>();
+++++		oradeaChildren.add(sibiu);
+++++			
+++++		Node oradea = new Node("Oradea", oradeaChildren);
+++++		
+++++		//Zerind and its children
+++++		List<Node> zerindChildren = new ArrayList<Node>();
+++++		zerindChildren.add(oradea);
+++++				
+++++		Node zerind = new Node("Zerind", zerindChildren);
+++++		
+++++		
+++++		
+++++		//Arad and its children
+++++		List<Node> aradChildren = new ArrayList<Node>();
+++++		aradChildren.add(zerind);
+++++		aradChildren.add(timisoara);
+++++		aradChildren.add(sibiu);
+++++				
+++++		Node arad = new Node("Arad", aradChildren);
+++++
+++++		DepthLimitedSearch dls = new DepthLimitedSearch(arad, 3);
+++++		
+++++		dls.DLS(arad, bucharest, 3);
+++++		
+++++		if(dls.getIsFound()){
+++++			System.out.println(bucharest.getCityName() + " found at depth " + dls.getGoalDepth());
+++++			System.out.println("Visited Nodes: " + dls.getVisitedNodes());
+++++			System.out.println("Goal path: " + dls.getGoalPath());
+++++		} else{
+++++			System.err.println(bucharest.getCityName() + " not found within depth limit.");
+++++		}
+++++	
+++++	}
+++++	
+++++}
++++diff --git a/src/ai/dls/DepthLimitedSearch.java b/src/ai/dls/DepthLimitedSearch.java
++++new file mode 100644
++++index 0000000..58f596d
++++--- /dev/null
+++++++ b/src/ai/dls/DepthLimitedSearch.java
++++@@ -0,0 +1,74 @@
+++++package ai.dls;
+++++
+++++import java.util.ArrayList;
+++++import java.util.List;
+++++import java.util.Stack;
+++++
+++++public class DepthLimitedSearch {
+++++	private final List<Node> listVisitedNodes = new ArrayList<Node>();
+++++	private boolean isFound = false;
+++++	private int limit, goalDeapth;
+++++	private Node startNode;
+++++	
++++-	public boolean getIsFound(){
+++++	public boolean getIsFound(boolean found){
+++++		return isFound;
+++++	}
+++++
++++-	public void setIsFound(boolean isFound, String testString) {
+++++	public void setIsFound(boolean isFound) {
+++++		this.isFound = isFound;
+++++	}
+++++	
+++++	public DepthLimitedSearch(Node startNode, int limit){
+++++		this.limit = limit;
+++++		this.startNode = startNode;
+++++	}
+++++	
+++++	public String getVisitedNodes(){
+++++		String visitedNodes = "";
+++++		for(Node nodes:listVisitedNodes){
+++++			visitedNodes += nodes.getCityName() + ", ";
+++++		}
+++++		
+++++		return visitedNodes.trim().substring(0, visitedNodes.length()-2);
+++++	}
+++++	
+++++	public String getGoalPath(){
+++++		Stack<String> path = new Stack<String>();
+++++		for(int i = 1; i<= goalDeapth; i++){
+++++			path.push(listVisitedNodes.get(listVisitedNodes.size()-i).getCityName());
+++++			
+++++		}
+++++	
+++++		path.push(startNode.getCityName());
+++++		String goalPath = "";
+++++			while(!path.isEmpty()){
+++++				goalPath += path.pop() + ", "; 
+++++			}
+++++			
+++++		return goalPath.trim().substring(0, goalPath.length() - 1);
+++++	}
+++++	
+++++	public int getGoalDepth(){
+++++		return goalDeapth;
+++++	}
+++++	
+++++	public DepthLimitedSearch(){
+++++		
+++++	}
+++++	
+++++	public void DLS(Node current, Node goal, int depth){
+++++		if(depth >= 0 && getIsFound() == false){
+++++			if(current.equals(goal)){
+++++				listVisitedNodes.add(current);
+++++				goalDeapth = (limit -depth);
+++++				setIsFound(true);
+++++			} else{
+++++				listVisitedNodes.add(current);
+++++				for(Node child: current.getChidlNode()){
+++++					DLS(child, goal, depth - 1);
+++++				}
+++++			}
+++++		}
+++++	}
+++++	
+++++}
++++diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
++++new file mode 100644
++++index 0000000..6e6766c
++++--- /dev/null
+++++++ b/src/ai/dls/Node.java
++++@@ -0,0 +1,30 @@
+++++package ai.dls;
+++++
+++++import java.util.List;
+++++
+++++public class Node {
+++++	private String cityName;
+++++	private List<Node> chidlNode;
+++++	
+++++	public Node(String cityName, List<Node> children){
+++++		this.cityName = cityName;
+++++		this.chidlNode = children;
+++++	}
+++++
+++++	public String getCityName() {
+++++		return cityName;
+++++	}
+++++
+++++	public void setCityName(String cityName) {
+++++		this.cityName = cityName;
+++++	}
+++++
+++++	public List<Node> getChidlNode() {
+++++		return chidlNode;
+++++	}
+++++
+++++	public void setChidlNode(List<Node> chidlNode) {
+++++		this.chidlNode = chidlNode;
+++++	}
+++++	
+++++}
+++diff --git a/src/ai/dls/MethodFinder.java b/src/ai/dls/MethodFinder.java
+++new file mode 100644
+++index 0000000..5a9f961
+++--- /dev/null
++++++ b/src/ai/dls/MethodFinder.java
+++@@ -0,0 +1,112 @@
++++package ai.dls;
++++import java.io.BufferedReader;
++++import java.io.FileNotFoundException;
++++import java.io.FileReader;
++++import java.io.IOException;
++++import java.util.ArrayList;
++++import java.util.List;
++++import java.util.StringTokenizer;
++++
++++public class MethodFinder {
++++	
++++	private String inputFileName;
++++	
++++	public String getInputFileName() {
++++		return inputFileName;
++++	}
++++		
++++	public void setInputFileName(String inputFileName) {
++++		this.inputFileName = inputFileName;
++++	}
++++	
++++	public void getParamListChangedMethods(List<String> methodSignatureList) {
++++
++++		for (int i = 0; i < methodSignatureList.size(); i++) {
++++			// old and new signatures are consequently and so i-->old and i+1-->new
++++			String oldSignature = extractMethodSignature(methodSignatureList.get(i));
++++			String newSignature = extractMethodSignature(methodSignatureList.get(++i));
++++
++++			String bareSpaceOldSignature = removeWhiteSpace(oldSignature);
++++			String bareSpaceNewSignature = removeWhiteSpace(newSignature);
++++
++++			if (compareOldAndNewSignatures(bareSpaceOldSignature, bareSpaceNewSignature)) {
++++				System.out.println("Old: " + oldSignature + "\t New:" + newSignature);
++++			}
++++		}
++++	}
++++	
++++	
++++	/** helper for get a list of methods (in pairs) that have changes in signatures**/
++++	private List<String> getMethodSignatureChangeLog(String inputFileName, int x) {
++++		//Used a regex from https://stackoverflow.com/questions/68633/regex-that-will-match-a-java-method-declaration;
++++		String pattern = ".[\\-\\+][ \\t]*(?:(?:public|protected|private)\\s+)?"+
++++				"(?:(static|final|native|synchronized|abstract|threadsafe|transient|"+
++++				"(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>)|(?:<[^<]*<["+
++++				"^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))\\s+){0,}(?!return)\\b([\\w.]+)\\b"+
++++				"(?:|(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>)|(?:<[^<]*"+
++++				"<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))((?:\\[\\]){0,})\\s+\\b\\w+"+
++++				"\\b\\s*\\(\\s*(?:\\b([\\w.]+)\\b(?:|(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+"+
++++				">[^>]*>)|(?:<[^<]*<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))((?:\\[\\]){0,})(\\.\\.\\.)?\\s+"+
++++				"(\\w+)\\b(?![>\\[])\\s*(?:,\\s+\\b([\\w.]+)\\b(?:|(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+"+
++++				">[^>]*>)|(?:<[^<]*<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))((?:\\[\\]){0,})(\\.\\.\\.)?\\s+"+
++++				"(\\w+)\\b(?![>\\[])\\s*){0,})?\\s*\\)(?:\\s*throws [\\w.]+(\\s*,\\s*[\\w.]+))?\\s*(?:\\{|;)[ \\t]*$";
++++		
++++		List<String> methodSignatureList = new ArrayList<String>();
++++		
++++		try {
++++			BufferedReader bReader = new BufferedReader(new FileReader(inputFileName));
++++			String line = "";
++++			
++++			while ((line = bReader.readLine()) != null) {
++++				
++++				if(line.matches(pattern)) {
++++					System.out.println(line);
++++					methodSignatureList.add(line);
++++				}
++++			}
++++		} catch (FileNotFoundException e ){
++++		
++++			e.printStackTrace();
++++		} catch (IOException e)  {
++++			e.printStackTrace();
++++		}
++++		
++++		return methodSignatureList;
++++	}//end of getMethodSignatureChangeLog
++++	
++++	
++++	/**helper method for extracting Method Signatures from a given line**/
++++	private String extractMethodSignature(String methodSignature) {
++++		//RegularExpression for white space
++++		return methodSignature.substring(3, methodSignature.length()-1);
++++	}
++++	
++++	/**helper method for removing white spaces from the signature line**/
++++	private String removeWhiteSpace(String methodSignature) {
++++		return methodSignature.replaceAll("\\s+","");
++++	}
++++
++++	/** helper for checking if the old and new signatures are same of not**/
++++	private boolean compareOldAndNewSignatures(String bareSpaceOldSignature, String bareSpaceNewSignature) {
++++		StringTokenizer tokensOfOldSignature = new StringTokenizer(bareSpaceOldSignature, "(");
++++		StringTokenizer tokensOfNewSignature = new StringTokenizer(bareSpaceNewSignature, "(");
++++		
++++		return tokensOfOldSignature.nextToken().equals(tokensOfNewSignature.nextToken());
++++	}
++++	
++++	
++++	/*** Constructor for Testing (otherwise some methods need to be static to be called by the main method)**/
++++	public MethodFinder() {
++++		this.inputFileName="";
++++		
++++	}
++++	
++++	
++++	/***Main method for testing***/
++++	public static void main(String args[]) {
++++		MethodFinder mf = new MethodFinder();
++++		mf.setInputFileName("./esxternaltestfiles/changelog.txt"); //input your log file
++++		mf.getParamListChangedMethods(mf.getMethodSignatureChangeLog(mf.getInputFileName(), 0));
++++	}
++++
++++}
+++diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
+++index 6e6766c..0623b3d 100644
+++--- a/src/ai/dls/Node.java
++++++ b/src/ai/dls/Node.java
+++@@ -5,6 +5,7 @@ import java.util.List;
+++ public class Node {
+++ 	private String cityName;
+++ 	private List<Node> chidlNode;
++++	int x;
+++ 	
+++ 	public Node(String cityName, List<Node> children){
+++ 		this.cityName = cityName;
+++@@ -23,7 +24,7 @@ public class Node {
+++ 		return chidlNode;
+++ 	}
+++ 
+++-	public void setChidlNode(List<Node> chidlNode) {
++++	public void setChidlNode(List<Node> chidlNode, int x) {
+++ 		this.chidlNode = chidlNode;
+++ 	}
+++ 	
+++
+++commit 8a8b7c5dc3fa8df8794e0815f42e7045e1c10e6a
+++Author: Saif Uddin Mahmud <sumahmud33@gmail.com>
+++Date:   Sun Nov 29 13:42:34 2015 +0600
+++
+++    Initial commit
+++
+++diff --git a/.classpath b/.classpath
+++new file mode 100644
+++index 0000000..91ee9a5
+++--- /dev/null
++++++ b/.classpath
+++@@ -0,0 +1,6 @@
++++<?xml version="1.0" encoding="UTF-8"?>
++++<classpath>
++++	<classpathentry kind="src" path="src"/>
++++	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
++++	<classpathentry kind="output" path="bin"/>
++++</classpath>
+++diff --git a/.gitignore b/.gitignore
+++new file mode 100644
+++index 0000000..ae3c172
+++--- /dev/null
++++++ b/.gitignore
+++@@ -0,0 +1 @@
++++/bin/
+++diff --git a/.project b/.project
+++new file mode 100644
+++index 0000000..2d4065e
+++--- /dev/null
++++++ b/.project
+++@@ -0,0 +1,17 @@
++++<?xml version="1.0" encoding="UTF-8"?>
++++<projectDescription>
++++	<name>AI_Assignment</name>
++++	<comment></comment>
++++	<projects>
++++	</projects>
++++	<buildSpec>
++++		<buildCommand>
++++			<name>org.eclipse.jdt.core.javabuilder</name>
++++			<arguments>
++++			</arguments>
++++		</buildCommand>
++++	</buildSpec>
++++	<natures>
++++		<nature>org.eclipse.jdt.core.javanature</nature>
++++	</natures>
++++</projectDescription>
+++diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
+++new file mode 100644
+++index 0000000..838bd9d
+++--- /dev/null
++++++ b/.settings/org.eclipse.jdt.core.prefs
+++@@ -0,0 +1,11 @@
++++eclipse.preferences.version=1
++++org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
++++org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
++++org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
++++org.eclipse.jdt.core.compiler.compliance=1.7
++++org.eclipse.jdt.core.compiler.debug.lineNumber=generate
++++org.eclipse.jdt.core.compiler.debug.localVariable=generate
++++org.eclipse.jdt.core.compiler.debug.sourceFile=generate
++++org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
++++org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
++++org.eclipse.jdt.core.compiler.source=1.7
+++diff --git a/src/ai/dls/DLSMain.java b/src/ai/dls/DLSMain.java
+++new file mode 100644
+++index 0000000..6088ab9
+++--- /dev/null
++++++ b/src/ai/dls/DLSMain.java
+++@@ -0,0 +1,112 @@
++++package ai.dls;
++++
++++import java.util.ArrayList;
++++import java.util.List;
++++
++++public class DLSMain {
++++	
++++	public static void main(String[] args){
++++		//Bucharest
++++		Node bucharest = new Node("Bucharest", null);
++++		
++++		
++++		//Pitesti and its children
++++		List<Node> pitestiChildren = new ArrayList<Node>();
++++		pitestiChildren.add(bucharest);
++++		
++++		Node pitesti = new Node("Pitesti", pitestiChildren);
++++		
++++		
++++		//Fagaras and its children
++++		List<Node> fagarasChildren = new ArrayList<Node>();
++++		fagarasChildren.add(bucharest);
++++			
++++		Node fagaras = new Node("Fagaras", fagarasChildren);
++++		
++++		//Craiova and its children
++++		List<Node> craiovaChildren = new ArrayList<Node>();
++++		craiovaChildren.add(pitesti);
++++				
++++		Node craiova = new Node("Craiova", craiovaChildren);
++++		
++++		
++++		
++++		//Riminicu and its children
++++		List<Node> rimnicuChildren = new ArrayList<Node>();
++++		rimnicuChildren.add(pitesti);
++++		rimnicuChildren.add(craiova);
++++				
++++		Node rimnicuVilcea = new Node("Rimnicu Vilcea", rimnicuChildren);
++++
++++		
++++		//Sibiu and its children
++++		List<Node> sibiuChildren = new ArrayList<Node>();
++++		sibiuChildren.add(fagaras);
++++		sibiuChildren.add(rimnicuVilcea);
++++				
++++		Node sibiu = new Node("Sibiu", sibiuChildren);
++++		
++++		//Drobeta and its children
++++		List<Node> drobetaChildren = new ArrayList<Node>();
++++		drobetaChildren.add(craiova);
++++				
++++		Node drobeta = new Node("Drobeta", drobetaChildren);
++++
++++		//Mahadia and its children
++++		List<Node> mahadiaChildren = new ArrayList<Node>();
++++		mahadiaChildren.add(drobeta);
++++				
++++		Node mahadia = new Node("Mahadia", mahadiaChildren);
++++
++++		
++++		//Lugoj and its children
++++		List<Node> lugojChildren = new ArrayList<Node>();
++++		lugojChildren.add(mahadia);
++++				
++++		Node lugoj = new Node("Lugoj", lugojChildren);
++++		
++++		
++++		//Timisoara and its children
++++		List<Node> timisoaraChildren = new ArrayList<Node>();
++++		timisoaraChildren.add(lugoj);
++++		
++++		Node timisoara = new Node("Timisoara", timisoaraChildren);
++++		
++++		
++++		//Oradea and its children
++++		List<Node> oradeaChildren = new ArrayList<Node>();
++++		oradeaChildren.add(sibiu);
++++			
++++		Node oradea = new Node("Oradea", oradeaChildren);
++++		
++++		//Zerind and its children
++++		List<Node> zerindChildren = new ArrayList<Node>();
++++		zerindChildren.add(oradea);
++++				
++++		Node zerind = new Node("Zerind", zerindChildren);
++++		
++++		
++++		
++++		//Arad and its children
++++		List<Node> aradChildren = new ArrayList<Node>();
++++		aradChildren.add(zerind);
++++		aradChildren.add(timisoara);
++++		aradChildren.add(sibiu);
++++				
++++		Node arad = new Node("Arad", aradChildren);
++++
++++		DepthLimitedSearch dls = new DepthLimitedSearch(arad, 3);
++++		
++++		dls.DLS(arad, bucharest, 3);
++++		
++++		if(dls.getIsFound()){
++++			System.out.println(bucharest.getCityName() + " found at depth " + dls.getGoalDepth());
++++			System.out.println("Visited Nodes: " + dls.getVisitedNodes());
++++			System.out.println("Goal path: " + dls.getGoalPath());
++++		} else{
++++			System.err.println(bucharest.getCityName() + " not found within depth limit.");
++++		}
++++	
++++	}
++++	
++++}
+++diff --git a/src/ai/dls/DepthLimitedSearch.java b/src/ai/dls/DepthLimitedSearch.java
+++new file mode 100644
+++index 0000000..58f596d
+++--- /dev/null
++++++ b/src/ai/dls/DepthLimitedSearch.java
+++@@ -0,0 +1,74 @@
++++package ai.dls;
++++
++++import java.util.ArrayList;
++++import java.util.List;
++++import java.util.Stack;
++++
++++public class DepthLimitedSearch {
++++	private final List<Node> listVisitedNodes = new ArrayList<Node>();
++++	private boolean isFound = false;
++++	private int limit, goalDeapth;
++++	private Node startNode;
++++	
++++	public boolean getIsFound(){
++++		return isFound;
++++	}
++++
++++	public void setIsFound(boolean isFound) {
++++		this.isFound = isFound;
++++	}
++++	
++++	public DepthLimitedSearch(Node startNode, int limit){
++++		this.limit = limit;
++++		this.startNode = startNode;
++++	}
++++	
++++	public String getVisitedNodes(){
++++		String visitedNodes = "";
++++		for(Node nodes:listVisitedNodes){
++++			visitedNodes += nodes.getCityName() + ", ";
++++		}
++++		
++++		return visitedNodes.trim().substring(0, visitedNodes.length()-2);
++++	}
++++	
++++	public String getGoalPath(){
++++		Stack<String> path = new Stack<String>();
++++		for(int i = 1; i<= goalDeapth; i++){
++++			path.push(listVisitedNodes.get(listVisitedNodes.size()-i).getCityName());
++++			
++++		}
++++	
++++		path.push(startNode.getCityName());
++++		String goalPath = "";
++++			while(!path.isEmpty()){
++++				goalPath += path.pop() + ", "; 
++++			}
++++			
++++		return goalPath.trim().substring(0, goalPath.length() - 1);
++++	}
++++	
++++	public int getGoalDepth(){
++++		return goalDeapth;
++++	}
++++	
++++	public DepthLimitedSearch(){
++++		
++++	}
++++	
++++	public void DLS(Node current, Node goal, int depth){
++++		if(depth >= 0 && getIsFound() == false){
++++			if(current.equals(goal)){
++++				listVisitedNodes.add(current);
++++				goalDeapth = (limit -depth);
++++				setIsFound(true);
++++			} else{
++++				listVisitedNodes.add(current);
++++				for(Node child: current.getChidlNode()){
++++					DLS(child, goal, depth - 1);
++++				}
++++			}
++++		}
++++	}
++++	
++++}
+++diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
+++new file mode 100644
+++index 0000000..6e6766c
+++--- /dev/null
++++++ b/src/ai/dls/Node.java
+++@@ -0,0 +1,30 @@
++++package ai.dls;
++++
++++import java.util.List;
++++
++++public class Node {
++++	private String cityName;
++++	private List<Node> chidlNode;
++++	
++++	public Node(String cityName, List<Node> children){
++++		this.cityName = cityName;
++++		this.chidlNode = children;
++++	}
++++
++++	public String getCityName() {
++++		return cityName;
++++	}
++++
++++	public void setCityName(String cityName) {
++++		this.cityName = cityName;
++++	}
++++
++++	public List<Node> getChidlNode() {
++++		return chidlNode;
++++	}
++++
++++	public void setChidlNode(List<Node> chidlNode) {
++++		this.chidlNode = chidlNode;
++++	}
++++	
++++}
++diff --git a/src/ai/dls/MethodFinder.java b/src/ai/dls/MethodFinder.java
++index 5a9f961..8224b37 100644
++--- a/src/ai/dls/MethodFinder.java
+++++ b/src/ai/dls/MethodFinder.java
++@@ -37,7 +37,7 @@ public class MethodFinder {
++ 	
++ 	
++ 	/** helper for get a list of methods (in pairs) that have changes in signatures**/
++-	private List<String> getMethodSignatureChangeLog(String inputFileName, int x) {
+++	private List<String> getMethodSignatureChangeLog(String inputFileName) {
++ 		//Used a regex from https://stackoverflow.com/questions/68633/regex-that-will-match-a-java-method-declaration;
++ 		String pattern = ".[\\-\\+][ \\t]*(?:(?:public|protected|private)\\s+)?"+
++ 				"(?:(static|final|native|synchronized|abstract|threadsafe|transient|"+
++@@ -106,7 +106,7 @@ public class MethodFinder {
++ 	public static void main(String args[]) {
++ 		MethodFinder mf = new MethodFinder();
++ 		mf.setInputFileName("./esxternaltestfiles/changelog.txt"); //input your log file
++-		mf.getParamListChangedMethods(mf.getMethodSignatureChangeLog(mf.getInputFileName(), 0));
+++		mf.getParamListChangedMethods(mf.getMethodSignatureChangeLog(mf.getInputFileName()));
++ 	}
++ 
++ }
+diff --git a/src/ai/dls/MethodFinder.java b/src/ai/dls/MethodFinder.java
+index 8224b37..043f75d 100644
+--- a/src/ai/dls/MethodFinder.java
++++ b/src/ai/dls/MethodFinder.java
+@@ -37,7 +37,7 @@ public class MethodFinder {
+ 	
+ 	
+ 	/** helper for get a list of methods (in pairs) that have changes in signatures**/
+-	private List<String> getMethodSignatureChangeLog(String inputFileName) {
++	private List<String> getMethodSignatureChangeLog(String inputFileName, String x, String y) {
+ 		//Used a regex from https://stackoverflow.com/questions/68633/regex-that-will-match-a-java-method-declaration;
+ 		String pattern = ".[\\-\\+][ \\t]*(?:(?:public|protected|private)\\s+)?"+
+ 				"(?:(static|final|native|synchronized|abstract|threadsafe|transient|"+
+@@ -106,7 +106,7 @@ public class MethodFinder {
+ 	public static void main(String args[]) {
+ 		MethodFinder mf = new MethodFinder();
+ 		mf.setInputFileName("./esxternaltestfiles/changelog.txt"); //input your log file
+-		mf.getParamListChangedMethods(mf.getMethodSignatureChangeLog(mf.getInputFileName()));
++		mf.getParamListChangedMethods(mf.getMethodSignatureChangeLog(mf.getInputFileName(), "", ""));
+ 	}
+ 
+ }
+diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
+index 0623b3d..7ac6b89 100644
+--- a/src/ai/dls/Node.java
++++ b/src/ai/dls/Node.java
+@@ -24,7 +24,7 @@ public class Node {
+ 		return chidlNode;
+ 	}
+ 
+-	public void setChidlNode(List<Node> chidlNode, int x) {
++	public void setChidlNode(List<Node> chidlNode, int x, String y) {
+ 		this.chidlNode = chidlNode;
+ 	}
+ 	
+
+commit 21ff802c5cc4ea14d0806374934605505ef91937
+Author: saif-laptop\Saif <sumahmud33@gmaill.com>
+Date:   Tue Jan 30 17:33:04 2018 +0600
+
+    new commit
+
+diff --git a/newLog.log b/newLog.log
+deleted file mode 100644
+index c8d58b6..0000000
+--- a/newLog.log
++++ /dev/null
+@@ -1,752 +0,0 @@
+-commit d521c86e080891563773e803efa24422f063efea
+-Author: saif-laptop\Saif <sumahmud33@gmaill.com>
+-Date:   Tue Jan 30 17:28:07 2018 +0600
+-
+-    Changed
+-
+-diff --git a/log.log b/log.log
+-new file mode 100644
+-index 0000000..0368713
+---- /dev/null
+-+++ b/log.log
+-@@ -0,0 +1,301 @@
+-+commit 8a8b7c5dc3fa8df8794e0815f42e7045e1c10e6a
+-+Author: Saif Uddin Mahmud <sumahmud33@gmail.com>
+-+Date:   Sun Nov 29 13:42:34 2015 +0600
+-+
+-+    Initial commit
+-+
+-+diff --git a/.classpath b/.classpath
+-+new file mode 100644
+-+index 0000000..91ee9a5
+-+--- /dev/null
+-++++ b/.classpath
+-+@@ -0,0 +1,6 @@
+-++<?xml version="1.0" encoding="UTF-8"?>
+-++<classpath>
+-++	<classpathentry kind="src" path="src"/>
+-++	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
+-++	<classpathentry kind="output" path="bin"/>
+-++</classpath>
+-+diff --git a/.gitignore b/.gitignore
+-+new file mode 100644
+-+index 0000000..ae3c172
+-+--- /dev/null
+-++++ b/.gitignore
+-+@@ -0,0 +1 @@
+-++/bin/
+-+diff --git a/.project b/.project
+-+new file mode 100644
+-+index 0000000..2d4065e
+-+--- /dev/null
+-++++ b/.project
+-+@@ -0,0 +1,17 @@
+-++<?xml version="1.0" encoding="UTF-8"?>
+-++<projectDescription>
+-++	<name>AI_Assignment</name>
+-++	<comment></comment>
+-++	<projects>
+-++	</projects>
+-++	<buildSpec>
+-++		<buildCommand>
+-++			<name>org.eclipse.jdt.core.javabuilder</name>
+-++			<arguments>
+-++			</arguments>
+-++		</buildCommand>
+-++	</buildSpec>
+-++	<natures>
+-++		<nature>org.eclipse.jdt.core.javanature</nature>
+-++	</natures>
+-++</projectDescription>
+-+diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
+-+new file mode 100644
+-+index 0000000..838bd9d
+-+--- /dev/null
+-++++ b/.settings/org.eclipse.jdt.core.prefs
+-+@@ -0,0 +1,11 @@
+-++eclipse.preferences.version=1
+-++org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+-++org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+-++org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+-++org.eclipse.jdt.core.compiler.compliance=1.7
+-++org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+-++org.eclipse.jdt.core.compiler.debug.localVariable=generate
+-++org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+-++org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+-++org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+-++org.eclipse.jdt.core.compiler.source=1.7
+-+diff --git a/src/ai/dls/DLSMain.java b/src/ai/dls/DLSMain.java
+-+new file mode 100644
+-+index 0000000..6088ab9
+-+--- /dev/null
+-++++ b/src/ai/dls/DLSMain.java
+-+@@ -0,0 +1,112 @@
+-++package ai.dls;
+-++
+-++import java.util.ArrayList;
+-++import java.util.List;
+-++
+-++public class DLSMain {
+-++	
+-++	public static void main(String[] args){
+-++		//Bucharest
+-++		Node bucharest = new Node("Bucharest", null);
+-++		
+-++		
+-++		//Pitesti and its children
+-++		List<Node> pitestiChildren = new ArrayList<Node>();
+-++		pitestiChildren.add(bucharest);
+-++		
+-++		Node pitesti = new Node("Pitesti", pitestiChildren);
+-++		
+-++		
+-++		//Fagaras and its children
+-++		List<Node> fagarasChildren = new ArrayList<Node>();
+-++		fagarasChildren.add(bucharest);
+-++			
+-++		Node fagaras = new Node("Fagaras", fagarasChildren);
+-++		
+-++		//Craiova and its children
+-++		List<Node> craiovaChildren = new ArrayList<Node>();
+-++		craiovaChildren.add(pitesti);
+-++				
+-++		Node craiova = new Node("Craiova", craiovaChildren);
+-++		
+-++		
+-++		
+-++		//Riminicu and its children
+-++		List<Node> rimnicuChildren = new ArrayList<Node>();
+-++		rimnicuChildren.add(pitesti);
+-++		rimnicuChildren.add(craiova);
+-++				
+-++		Node rimnicuVilcea = new Node("Rimnicu Vilcea", rimnicuChildren);
+-++
+-++		
+-++		//Sibiu and its children
+-++		List<Node> sibiuChildren = new ArrayList<Node>();
+-++		sibiuChildren.add(fagaras);
+-++		sibiuChildren.add(rimnicuVilcea);
+-++				
+-++		Node sibiu = new Node("Sibiu", sibiuChildren);
+-++		
+-++		//Drobeta and its children
+-++		List<Node> drobetaChildren = new ArrayList<Node>();
+-++		drobetaChildren.add(craiova);
+-++				
+-++		Node drobeta = new Node("Drobeta", drobetaChildren);
+-++
+-++		//Mahadia and its children
+-++		List<Node> mahadiaChildren = new ArrayList<Node>();
+-++		mahadiaChildren.add(drobeta);
+-++				
+-++		Node mahadia = new Node("Mahadia", mahadiaChildren);
+-++
+-++		
+-++		//Lugoj and its children
+-++		List<Node> lugojChildren = new ArrayList<Node>();
+-++		lugojChildren.add(mahadia);
+-++				
+-++		Node lugoj = new Node("Lugoj", lugojChildren);
+-++		
+-++		
+-++		//Timisoara and its children
+-++		List<Node> timisoaraChildren = new ArrayList<Node>();
+-++		timisoaraChildren.add(lugoj);
+-++		
+-++		Node timisoara = new Node("Timisoara", timisoaraChildren);
+-++		
+-++		
+-++		//Oradea and its children
+-++		List<Node> oradeaChildren = new ArrayList<Node>();
+-++		oradeaChildren.add(sibiu);
+-++			
+-++		Node oradea = new Node("Oradea", oradeaChildren);
+-++		
+-++		//Zerind and its children
+-++		List<Node> zerindChildren = new ArrayList<Node>();
+-++		zerindChildren.add(oradea);
+-++				
+-++		Node zerind = new Node("Zerind", zerindChildren);
+-++		
+-++		
+-++		
+-++		//Arad and its children
+-++		List<Node> aradChildren = new ArrayList<Node>();
+-++		aradChildren.add(zerind);
+-++		aradChildren.add(timisoara);
+-++		aradChildren.add(sibiu);
+-++				
+-++		Node arad = new Node("Arad", aradChildren);
+-++
+-++		DepthLimitedSearch dls = new DepthLimitedSearch(arad, 3);
+-++		
+-++		dls.DLS(arad, bucharest, 3);
+-++		
+-++		if(dls.getIsFound()){
+-++			System.out.println(bucharest.getCityName() + " found at depth " + dls.getGoalDepth());
+-++			System.out.println("Visited Nodes: " + dls.getVisitedNodes());
+-++			System.out.println("Goal path: " + dls.getGoalPath());
+-++		} else{
+-++			System.err.println(bucharest.getCityName() + " not found within depth limit.");
+-++		}
+-++	
+-++	}
+-++	
+-++}
+-+diff --git a/src/ai/dls/DepthLimitedSearch.java b/src/ai/dls/DepthLimitedSearch.java
+-+new file mode 100644
+-+index 0000000..58f596d
+-+--- /dev/null
+-++++ b/src/ai/dls/DepthLimitedSearch.java
+-+@@ -0,0 +1,74 @@
+-++package ai.dls;
+-++
+-++import java.util.ArrayList;
+-++import java.util.List;
+-++import java.util.Stack;
+-++
+-++public class DepthLimitedSearch {
+-++	private final List<Node> listVisitedNodes = new ArrayList<Node>();
+-++	private boolean isFound = false;
+-++	private int limit, goalDeapth;
+-++	private Node startNode;
+-++	
+-+-	public boolean getIsFound(){
+-++	public boolean getIsFound(boolean found){
+-++		return isFound;
+-++	}
+-++
+-+-	public void setIsFound(boolean isFound, String testString) {
+-++	public void setIsFound(boolean isFound) {
+-++		this.isFound = isFound;
+-++	}
+-++	
+-++	public DepthLimitedSearch(Node startNode, int limit){
+-++		this.limit = limit;
+-++		this.startNode = startNode;
+-++	}
+-++	
+-++	public String getVisitedNodes(){
+-++		String visitedNodes = "";
+-++		for(Node nodes:listVisitedNodes){
+-++			visitedNodes += nodes.getCityName() + ", ";
+-++		}
+-++		
+-++		return visitedNodes.trim().substring(0, visitedNodes.length()-2);
+-++	}
+-++	
+-++	public String getGoalPath(){
+-++		Stack<String> path = new Stack<String>();
+-++		for(int i = 1; i<= goalDeapth; i++){
+-++			path.push(listVisitedNodes.get(listVisitedNodes.size()-i).getCityName());
+-++			
+-++		}
+-++	
+-++		path.push(startNode.getCityName());
+-++		String goalPath = "";
+-++			while(!path.isEmpty()){
+-++				goalPath += path.pop() + ", "; 
+-++			}
+-++			
+-++		return goalPath.trim().substring(0, goalPath.length() - 1);
+-++	}
+-++	
+-++	public int getGoalDepth(){
+-++		return goalDeapth;
+-++	}
+-++	
+-++	public DepthLimitedSearch(){
+-++		
+-++	}
+-++	
+-++	public void DLS(Node current, Node goal, int depth){
+-++		if(depth >= 0 && getIsFound() == false){
+-++			if(current.equals(goal)){
+-++				listVisitedNodes.add(current);
+-++				goalDeapth = (limit -depth);
+-++				setIsFound(true);
+-++			} else{
+-++				listVisitedNodes.add(current);
+-++				for(Node child: current.getChidlNode()){
+-++					DLS(child, goal, depth - 1);
+-++				}
+-++			}
+-++		}
+-++	}
+-++	
+-++}
+-+diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
+-+new file mode 100644
+-+index 0000000..6e6766c
+-+--- /dev/null
+-++++ b/src/ai/dls/Node.java
+-+@@ -0,0 +1,30 @@
+-++package ai.dls;
+-++
+-++import java.util.List;
+-++
+-++public class Node {
+-++	private String cityName;
+-++	private List<Node> chidlNode;
+-++	
+-++	public Node(String cityName, List<Node> children){
+-++		this.cityName = cityName;
+-++		this.chidlNode = children;
+-++	}
+-++
+-++	public String getCityName() {
+-++		return cityName;
+-++	}
+-++
+-++	public void setCityName(String cityName) {
+-++		this.cityName = cityName;
+-++	}
+-++
+-++	public List<Node> getChidlNode() {
+-++		return chidlNode;
+-++	}
+-++
+-++	public void setChidlNode(List<Node> chidlNode) {
+-++		this.chidlNode = chidlNode;
+-++	}
+-++	
+-++}
+-diff --git a/src/ai/dls/MethodFinder.java b/src/ai/dls/MethodFinder.java
+-new file mode 100644
+-index 0000000..5a9f961
+---- /dev/null
+-+++ b/src/ai/dls/MethodFinder.java
+-@@ -0,0 +1,112 @@
+-+package ai.dls;
+-+import java.io.BufferedReader;
+-+import java.io.FileNotFoundException;
+-+import java.io.FileReader;
+-+import java.io.IOException;
+-+import java.util.ArrayList;
+-+import java.util.List;
+-+import java.util.StringTokenizer;
+-+
+-+public class MethodFinder {
+-+	
+-+	private String inputFileName;
+-+	
+-+	public String getInputFileName() {
+-+		return inputFileName;
+-+	}
+-+		
+-+	public void setInputFileName(String inputFileName) {
+-+		this.inputFileName = inputFileName;
+-+	}
+-+	
+-+	public void getParamListChangedMethods(List<String> methodSignatureList) {
+-+
+-+		for (int i = 0; i < methodSignatureList.size(); i++) {
+-+			// old and new signatures are consequently and so i-->old and i+1-->new
+-+			String oldSignature = extractMethodSignature(methodSignatureList.get(i));
+-+			String newSignature = extractMethodSignature(methodSignatureList.get(++i));
+-+
+-+			String bareSpaceOldSignature = removeWhiteSpace(oldSignature);
+-+			String bareSpaceNewSignature = removeWhiteSpace(newSignature);
+-+
+-+			if (compareOldAndNewSignatures(bareSpaceOldSignature, bareSpaceNewSignature)) {
+-+				System.out.println("Old: " + oldSignature + "\t New:" + newSignature);
+-+			}
+-+		}
+-+	}
+-+	
+-+	
+-+	/** helper for get a list of methods (in pairs) that have changes in signatures**/
+-+	private List<String> getMethodSignatureChangeLog(String inputFileName, int x) {
+-+		//Used a regex from https://stackoverflow.com/questions/68633/regex-that-will-match-a-java-method-declaration;
+-+		String pattern = ".[\\-\\+][ \\t]*(?:(?:public|protected|private)\\s+)?"+
+-+				"(?:(static|final|native|synchronized|abstract|threadsafe|transient|"+
+-+				"(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>)|(?:<[^<]*<["+
+-+				"^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))\\s+){0,}(?!return)\\b([\\w.]+)\\b"+
+-+				"(?:|(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>)|(?:<[^<]*"+
+-+				"<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))((?:\\[\\]){0,})\\s+\\b\\w+"+
+-+				"\\b\\s*\\(\\s*(?:\\b([\\w.]+)\\b(?:|(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+"+
+-+				">[^>]*>)|(?:<[^<]*<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))((?:\\[\\]){0,})(\\.\\.\\.)?\\s+"+
+-+				"(\\w+)\\b(?![>\\[])\\s*(?:,\\s+\\b([\\w.]+)\\b(?:|(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+"+
+-+				">[^>]*>)|(?:<[^<]*<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))((?:\\[\\]){0,})(\\.\\.\\.)?\\s+"+
+-+				"(\\w+)\\b(?![>\\[])\\s*){0,})?\\s*\\)(?:\\s*throws [\\w.]+(\\s*,\\s*[\\w.]+))?\\s*(?:\\{|;)[ \\t]*$";
+-+		
+-+		List<String> methodSignatureList = new ArrayList<String>();
+-+		
+-+		try {
+-+			BufferedReader bReader = new BufferedReader(new FileReader(inputFileName));
+-+			String line = "";
+-+			
+-+			while ((line = bReader.readLine()) != null) {
+-+				
+-+				if(line.matches(pattern)) {
+-+					System.out.println(line);
+-+					methodSignatureList.add(line);
+-+				}
+-+			}
+-+		} catch (FileNotFoundException e ){
+-+		
+-+			e.printStackTrace();
+-+		} catch (IOException e)  {
+-+			e.printStackTrace();
+-+		}
+-+		
+-+		return methodSignatureList;
+-+	}//end of getMethodSignatureChangeLog
+-+	
+-+	
+-+	/**helper method for extracting Method Signatures from a given line**/
+-+	private String extractMethodSignature(String methodSignature) {
+-+		//RegularExpression for white space
+-+		return methodSignature.substring(3, methodSignature.length()-1);
+-+	}
+-+	
+-+	/**helper method for removing white spaces from the signature line**/
+-+	private String removeWhiteSpace(String methodSignature) {
+-+		return methodSignature.replaceAll("\\s+","");
+-+	}
+-+
+-+	/** helper for checking if the old and new signatures are same of not**/
+-+	private boolean compareOldAndNewSignatures(String bareSpaceOldSignature, String bareSpaceNewSignature) {
+-+		StringTokenizer tokensOfOldSignature = new StringTokenizer(bareSpaceOldSignature, "(");
+-+		StringTokenizer tokensOfNewSignature = new StringTokenizer(bareSpaceNewSignature, "(");
+-+		
+-+		return tokensOfOldSignature.nextToken().equals(tokensOfNewSignature.nextToken());
+-+	}
+-+	
+-+	
+-+	/*** Constructor for Testing (otherwise some methods need to be static to be called by the main method)**/
+-+	public MethodFinder() {
+-+		this.inputFileName="";
+-+		
+-+	}
+-+	
+-+	
+-+	/***Main method for testing***/
+-+	public static void main(String args[]) {
+-+		MethodFinder mf = new MethodFinder();
+-+		mf.setInputFileName("./esxternaltestfiles/changelog.txt"); //input your log file
+-+		mf.getParamListChangedMethods(mf.getMethodSignatureChangeLog(mf.getInputFileName(), 0));
+-+	}
+-+
+-+}
+-diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
+-index 6e6766c..0623b3d 100644
+---- a/src/ai/dls/Node.java
+-+++ b/src/ai/dls/Node.java
+-@@ -5,6 +5,7 @@ import java.util.List;
+- public class Node {
+- 	private String cityName;
+- 	private List<Node> chidlNode;
+-+	int x;
+- 	
+- 	public Node(String cityName, List<Node> children){
+- 		this.cityName = cityName;
+-@@ -23,7 +24,7 @@ public class Node {
+- 		return chidlNode;
+- 	}
+- 
+--	public void setChidlNode(List<Node> chidlNode) {
+-+	public void setChidlNode(List<Node> chidlNode, int x) {
+- 		this.chidlNode = chidlNode;
+- 	}
+- 	
+-
+-commit 8a8b7c5dc3fa8df8794e0815f42e7045e1c10e6a
+-Author: Saif Uddin Mahmud <sumahmud33@gmail.com>
+-Date:   Sun Nov 29 13:42:34 2015 +0600
+-
+-    Initial commit
+-
+-diff --git a/.classpath b/.classpath
+-new file mode 100644
+-index 0000000..91ee9a5
+---- /dev/null
+-+++ b/.classpath
+-@@ -0,0 +1,6 @@
+-+<?xml version="1.0" encoding="UTF-8"?>
+-+<classpath>
+-+	<classpathentry kind="src" path="src"/>
+-+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
+-+	<classpathentry kind="output" path="bin"/>
+-+</classpath>
+-diff --git a/.gitignore b/.gitignore
+-new file mode 100644
+-index 0000000..ae3c172
+---- /dev/null
+-+++ b/.gitignore
+-@@ -0,0 +1 @@
+-+/bin/
+-diff --git a/.project b/.project
+-new file mode 100644
+-index 0000000..2d4065e
+---- /dev/null
+-+++ b/.project
+-@@ -0,0 +1,17 @@
+-+<?xml version="1.0" encoding="UTF-8"?>
+-+<projectDescription>
+-+	<name>AI_Assignment</name>
+-+	<comment></comment>
+-+	<projects>
+-+	</projects>
+-+	<buildSpec>
+-+		<buildCommand>
+-+			<name>org.eclipse.jdt.core.javabuilder</name>
+-+			<arguments>
+-+			</arguments>
+-+		</buildCommand>
+-+	</buildSpec>
+-+	<natures>
+-+		<nature>org.eclipse.jdt.core.javanature</nature>
+-+	</natures>
+-+</projectDescription>
+-diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
+-new file mode 100644
+-index 0000000..838bd9d
+---- /dev/null
+-+++ b/.settings/org.eclipse.jdt.core.prefs
+-@@ -0,0 +1,11 @@
+-+eclipse.preferences.version=1
+-+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+-+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+-+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+-+org.eclipse.jdt.core.compiler.compliance=1.7
+-+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+-+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+-+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+-+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+-+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+-+org.eclipse.jdt.core.compiler.source=1.7
+-diff --git a/src/ai/dls/DLSMain.java b/src/ai/dls/DLSMain.java
+-new file mode 100644
+-index 0000000..6088ab9
+---- /dev/null
+-+++ b/src/ai/dls/DLSMain.java
+-@@ -0,0 +1,112 @@
+-+package ai.dls;
+-+
+-+import java.util.ArrayList;
+-+import java.util.List;
+-+
+-+public class DLSMain {
+-+	
+-+	public static void main(String[] args){
+-+		//Bucharest
+-+		Node bucharest = new Node("Bucharest", null);
+-+		
+-+		
+-+		//Pitesti and its children
+-+		List<Node> pitestiChildren = new ArrayList<Node>();
+-+		pitestiChildren.add(bucharest);
+-+		
+-+		Node pitesti = new Node("Pitesti", pitestiChildren);
+-+		
+-+		
+-+		//Fagaras and its children
+-+		List<Node> fagarasChildren = new ArrayList<Node>();
+-+		fagarasChildren.add(bucharest);
+-+			
+-+		Node fagaras = new Node("Fagaras", fagarasChildren);
+-+		
+-+		//Craiova and its children
+-+		List<Node> craiovaChildren = new ArrayList<Node>();
+-+		craiovaChildren.add(pitesti);
+-+				
+-+		Node craiova = new Node("Craiova", craiovaChildren);
+-+		
+-+		
+-+		
+-+		//Riminicu and its children
+-+		List<Node> rimnicuChildren = new ArrayList<Node>();
+-+		rimnicuChildren.add(pitesti);
+-+		rimnicuChildren.add(craiova);
+-+				
+-+		Node rimnicuVilcea = new Node("Rimnicu Vilcea", rimnicuChildren);
+-+
+-+		
+-+		//Sibiu and its children
+-+		List<Node> sibiuChildren = new ArrayList<Node>();
+-+		sibiuChildren.add(fagaras);
+-+		sibiuChildren.add(rimnicuVilcea);
+-+				
+-+		Node sibiu = new Node("Sibiu", sibiuChildren);
+-+		
+-+		//Drobeta and its children
+-+		List<Node> drobetaChildren = new ArrayList<Node>();
+-+		drobetaChildren.add(craiova);
+-+				
+-+		Node drobeta = new Node("Drobeta", drobetaChildren);
+-+
+-+		//Mahadia and its children
+-+		List<Node> mahadiaChildren = new ArrayList<Node>();
+-+		mahadiaChildren.add(drobeta);
+-+				
+-+		Node mahadia = new Node("Mahadia", mahadiaChildren);
+-+
+-+		
+-+		//Lugoj and its children
+-+		List<Node> lugojChildren = new ArrayList<Node>();
+-+		lugojChildren.add(mahadia);
+-+				
+-+		Node lugoj = new Node("Lugoj", lugojChildren);
+-+		
+-+		
+-+		//Timisoara and its children
+-+		List<Node> timisoaraChildren = new ArrayList<Node>();
+-+		timisoaraChildren.add(lugoj);
+-+		
+-+		Node timisoara = new Node("Timisoara", timisoaraChildren);
+-+		
+-+		
+-+		//Oradea and its children
+-+		List<Node> oradeaChildren = new ArrayList<Node>();
+-+		oradeaChildren.add(sibiu);
+-+			
+-+		Node oradea = new Node("Oradea", oradeaChildren);
+-+		
+-+		//Zerind and its children
+-+		List<Node> zerindChildren = new ArrayList<Node>();
+-+		zerindChildren.add(oradea);
+-+				
+-+		Node zerind = new Node("Zerind", zerindChildren);
+-+		
+-+		
+-+		
+-+		//Arad and its children
+-+		List<Node> aradChildren = new ArrayList<Node>();
+-+		aradChildren.add(zerind);
+-+		aradChildren.add(timisoara);
+-+		aradChildren.add(sibiu);
+-+				
+-+		Node arad = new Node("Arad", aradChildren);
+-+
+-+		DepthLimitedSearch dls = new DepthLimitedSearch(arad, 3);
+-+		
+-+		dls.DLS(arad, bucharest, 3);
+-+		
+-+		if(dls.getIsFound()){
+-+			System.out.println(bucharest.getCityName() + " found at depth " + dls.getGoalDepth());
+-+			System.out.println("Visited Nodes: " + dls.getVisitedNodes());
+-+			System.out.println("Goal path: " + dls.getGoalPath());
+-+		} else{
+-+			System.err.println(bucharest.getCityName() + " not found within depth limit.");
+-+		}
+-+	
+-+	}
+-+	
+-+}
+-diff --git a/src/ai/dls/DepthLimitedSearch.java b/src/ai/dls/DepthLimitedSearch.java
+-new file mode 100644
+-index 0000000..58f596d
+---- /dev/null
+-+++ b/src/ai/dls/DepthLimitedSearch.java
+-@@ -0,0 +1,74 @@
+-+package ai.dls;
+-+
+-+import java.util.ArrayList;
+-+import java.util.List;
+-+import java.util.Stack;
+-+
+-+public class DepthLimitedSearch {
+-+	private final List<Node> listVisitedNodes = new ArrayList<Node>();
+-+	private boolean isFound = false;
+-+	private int limit, goalDeapth;
+-+	private Node startNode;
+-+	
+-+	public boolean getIsFound(){
+-+		return isFound;
+-+	}
+-+
+-+	public void setIsFound(boolean isFound) {
+-+		this.isFound = isFound;
+-+	}
+-+	
+-+	public DepthLimitedSearch(Node startNode, int limit){
+-+		this.limit = limit;
+-+		this.startNode = startNode;
+-+	}
+-+	
+-+	public String getVisitedNodes(){
+-+		String visitedNodes = "";
+-+		for(Node nodes:listVisitedNodes){
+-+			visitedNodes += nodes.getCityName() + ", ";
+-+		}
+-+		
+-+		return visitedNodes.trim().substring(0, visitedNodes.length()-2);
+-+	}
+-+	
+-+	public String getGoalPath(){
+-+		Stack<String> path = new Stack<String>();
+-+		for(int i = 1; i<= goalDeapth; i++){
+-+			path.push(listVisitedNodes.get(listVisitedNodes.size()-i).getCityName());
+-+			
+-+		}
+-+	
+-+		path.push(startNode.getCityName());
+-+		String goalPath = "";
+-+			while(!path.isEmpty()){
+-+				goalPath += path.pop() + ", "; 
+-+			}
+-+			
+-+		return goalPath.trim().substring(0, goalPath.length() - 1);
+-+	}
+-+	
+-+	public int getGoalDepth(){
+-+		return goalDeapth;
+-+	}
+-+	
+-+	public DepthLimitedSearch(){
+-+		
+-+	}
+-+	
+-+	public void DLS(Node current, Node goal, int depth){
+-+		if(depth >= 0 && getIsFound() == false){
+-+			if(current.equals(goal)){
+-+				listVisitedNodes.add(current);
+-+				goalDeapth = (limit -depth);
+-+				setIsFound(true);
+-+			} else{
+-+				listVisitedNodes.add(current);
+-+				for(Node child: current.getChidlNode()){
+-+					DLS(child, goal, depth - 1);
+-+				}
+-+			}
+-+		}
+-+	}
+-+	
+-+}
+-diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
+-new file mode 100644
+-index 0000000..6e6766c
+---- /dev/null
+-+++ b/src/ai/dls/Node.java
+-@@ -0,0 +1,30 @@
+-+package ai.dls;
+-+
+-+import java.util.List;
+-+
+-+public class Node {
+-+	private String cityName;
+-+	private List<Node> chidlNode;
+-+	
+-+	public Node(String cityName, List<Node> children){
+-+		this.cityName = cityName;
+-+		this.chidlNode = children;
+-+	}
+-+
+-+	public String getCityName() {
+-+		return cityName;
+-+	}
+-+
+-+	public void setCityName(String cityName) {
+-+		this.cityName = cityName;
+-+	}
+-+
+-+	public List<Node> getChidlNode() {
+-+		return chidlNode;
+-+	}
+-+
+-+	public void setChidlNode(List<Node> chidlNode) {
+-+		this.chidlNode = chidlNode;
+-+	}
+-+	
+-+}
diff --git a/src/ai/dls/MethodFinder.java b/src/ai/dls/MethodFinder.java
index 043f75d..fe05aa1 100644
--- a/src/ai/dls/MethodFinder.java
+++ b/src/ai/dls/MethodFinder.java
@@ -37,7 +37,7 @@ public class MethodFinder {
 	
 	
 	/** helper for get a list of methods (in pairs) that have changes in signatures**/
-	private List<String> getMethodSignatureChangeLog(String inputFileName, String x, String y) {
+	private List<String> getMethodSignatureChangeLog(String inputFileName, String x, String y, int xyz) {
 		//Used a regex from https://stackoverflow.com/questions/68633/regex-that-will-match-a-java-method-declaration;
 		String pattern = ".[\\-\\+][ \\t]*(?:(?:public|protected|private)\\s+)?"+
 				"(?:(static|final|native|synchronized|abstract|threadsafe|transient|"+
@@ -106,7 +106,7 @@ public class MethodFinder {
 	public static void main(String args[]) {
 		MethodFinder mf = new MethodFinder();
 		mf.setInputFileName("./esxternaltestfiles/changelog.txt"); //input your log file
-		mf.getParamListChangedMethods(mf.getMethodSignatureChangeLog(mf.getInputFileName(), "", ""));
+		mf.getParamListChangedMethods(mf.getMethodSignatureChangeLog(mf.getInputFileName(), "", "", 0));
 	}
 
 }
diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
index 7ac6b89..0ba8e8c 100644
--- a/src/ai/dls/Node.java
+++ b/src/ai/dls/Node.java
@@ -20,11 +20,11 @@ public class Node {
 		this.cityName = cityName;
 	}
 
-	public List<Node> getChidlNode() {
+	public List<Node> getChidlNode(int a) {
 		return chidlNode;
 	}
 
-	public void setChidlNode(List<Node> chidlNode, int x, String y) {
+	public void setChidlNode(List<Node> chidlNode, int x, String y, int a) {
 		this.chidlNode = chidlNode;
 	}
 	

commit 4817306221cf279487a8d5d145e298f8c8f2a500
Author: saif-laptop\Saif <sumahmud33@gmaill.com>
Date:   Tue Jan 30 17:36:32 2018 +0600

    new commit 2

diff --git a/newLog11.log b/newLog11.log
new file mode 100644
index 0000000..11db22e
--- /dev/null
+++ b/newLog11.log
@@ -0,0 +1,1551 @@
+commit 21ff802c5cc4ea14d0806374934605505ef91937
+Author: saif-laptop\Saif <sumahmud33@gmaill.com>
+Date:   Tue Jan 30 17:33:04 2018 +0600
+
+    new commit
+
+diff --git a/newLog.log b/newLog.log
+deleted file mode 100644
+index c8d58b6..0000000
+--- a/newLog.log
++++ /dev/null
+@@ -1,752 +0,0 @@
+-commit d521c86e080891563773e803efa24422f063efea
+-Author: saif-laptop\Saif <sumahmud33@gmaill.com>
+-Date:   Tue Jan 30 17:28:07 2018 +0600
+-
+-    Changed
+-
+-diff --git a/log.log b/log.log
+-new file mode 100644
+-index 0000000..0368713
+---- /dev/null
+-+++ b/log.log
+-@@ -0,0 +1,301 @@
+-+commit 8a8b7c5dc3fa8df8794e0815f42e7045e1c10e6a
+-+Author: Saif Uddin Mahmud <sumahmud33@gmail.com>
+-+Date:   Sun Nov 29 13:42:34 2015 +0600
+-+
+-+    Initial commit
+-+
+-+diff --git a/.classpath b/.classpath
+-+new file mode 100644
+-+index 0000000..91ee9a5
+-+--- /dev/null
+-++++ b/.classpath
+-+@@ -0,0 +1,6 @@
+-++<?xml version="1.0" encoding="UTF-8"?>
+-++<classpath>
+-++	<classpathentry kind="src" path="src"/>
+-++	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
+-++	<classpathentry kind="output" path="bin"/>
+-++</classpath>
+-+diff --git a/.gitignore b/.gitignore
+-+new file mode 100644
+-+index 0000000..ae3c172
+-+--- /dev/null
+-++++ b/.gitignore
+-+@@ -0,0 +1 @@
+-++/bin/
+-+diff --git a/.project b/.project
+-+new file mode 100644
+-+index 0000000..2d4065e
+-+--- /dev/null
+-++++ b/.project
+-+@@ -0,0 +1,17 @@
+-++<?xml version="1.0" encoding="UTF-8"?>
+-++<projectDescription>
+-++	<name>AI_Assignment</name>
+-++	<comment></comment>
+-++	<projects>
+-++	</projects>
+-++	<buildSpec>
+-++		<buildCommand>
+-++			<name>org.eclipse.jdt.core.javabuilder</name>
+-++			<arguments>
+-++			</arguments>
+-++		</buildCommand>
+-++	</buildSpec>
+-++	<natures>
+-++		<nature>org.eclipse.jdt.core.javanature</nature>
+-++	</natures>
+-++</projectDescription>
+-+diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
+-+new file mode 100644
+-+index 0000000..838bd9d
+-+--- /dev/null
+-++++ b/.settings/org.eclipse.jdt.core.prefs
+-+@@ -0,0 +1,11 @@
+-++eclipse.preferences.version=1
+-++org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+-++org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+-++org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+-++org.eclipse.jdt.core.compiler.compliance=1.7
+-++org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+-++org.eclipse.jdt.core.compiler.debug.localVariable=generate
+-++org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+-++org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+-++org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+-++org.eclipse.jdt.core.compiler.source=1.7
+-+diff --git a/src/ai/dls/DLSMain.java b/src/ai/dls/DLSMain.java
+-+new file mode 100644
+-+index 0000000..6088ab9
+-+--- /dev/null
+-++++ b/src/ai/dls/DLSMain.java
+-+@@ -0,0 +1,112 @@
+-++package ai.dls;
+-++
+-++import java.util.ArrayList;
+-++import java.util.List;
+-++
+-++public class DLSMain {
+-++	
+-++	public static void main(String[] args){
+-++		//Bucharest
+-++		Node bucharest = new Node("Bucharest", null);
+-++		
+-++		
+-++		//Pitesti and its children
+-++		List<Node> pitestiChildren = new ArrayList<Node>();
+-++		pitestiChildren.add(bucharest);
+-++		
+-++		Node pitesti = new Node("Pitesti", pitestiChildren);
+-++		
+-++		
+-++		//Fagaras and its children
+-++		List<Node> fagarasChildren = new ArrayList<Node>();
+-++		fagarasChildren.add(bucharest);
+-++			
+-++		Node fagaras = new Node("Fagaras", fagarasChildren);
+-++		
+-++		//Craiova and its children
+-++		List<Node> craiovaChildren = new ArrayList<Node>();
+-++		craiovaChildren.add(pitesti);
+-++				
+-++		Node craiova = new Node("Craiova", craiovaChildren);
+-++		
+-++		
+-++		
+-++		//Riminicu and its children
+-++		List<Node> rimnicuChildren = new ArrayList<Node>();
+-++		rimnicuChildren.add(pitesti);
+-++		rimnicuChildren.add(craiova);
+-++				
+-++		Node rimnicuVilcea = new Node("Rimnicu Vilcea", rimnicuChildren);
+-++
+-++		
+-++		//Sibiu and its children
+-++		List<Node> sibiuChildren = new ArrayList<Node>();
+-++		sibiuChildren.add(fagaras);
+-++		sibiuChildren.add(rimnicuVilcea);
+-++				
+-++		Node sibiu = new Node("Sibiu", sibiuChildren);
+-++		
+-++		//Drobeta and its children
+-++		List<Node> drobetaChildren = new ArrayList<Node>();
+-++		drobetaChildren.add(craiova);
+-++				
+-++		Node drobeta = new Node("Drobeta", drobetaChildren);
+-++
+-++		//Mahadia and its children
+-++		List<Node> mahadiaChildren = new ArrayList<Node>();
+-++		mahadiaChildren.add(drobeta);
+-++				
+-++		Node mahadia = new Node("Mahadia", mahadiaChildren);
+-++
+-++		
+-++		//Lugoj and its children
+-++		List<Node> lugojChildren = new ArrayList<Node>();
+-++		lugojChildren.add(mahadia);
+-++				
+-++		Node lugoj = new Node("Lugoj", lugojChildren);
+-++		
+-++		
+-++		//Timisoara and its children
+-++		List<Node> timisoaraChildren = new ArrayList<Node>();
+-++		timisoaraChildren.add(lugoj);
+-++		
+-++		Node timisoara = new Node("Timisoara", timisoaraChildren);
+-++		
+-++		
+-++		//Oradea and its children
+-++		List<Node> oradeaChildren = new ArrayList<Node>();
+-++		oradeaChildren.add(sibiu);
+-++			
+-++		Node oradea = new Node("Oradea", oradeaChildren);
+-++		
+-++		//Zerind and its children
+-++		List<Node> zerindChildren = new ArrayList<Node>();
+-++		zerindChildren.add(oradea);
+-++				
+-++		Node zerind = new Node("Zerind", zerindChildren);
+-++		
+-++		
+-++		
+-++		//Arad and its children
+-++		List<Node> aradChildren = new ArrayList<Node>();
+-++		aradChildren.add(zerind);
+-++		aradChildren.add(timisoara);
+-++		aradChildren.add(sibiu);
+-++				
+-++		Node arad = new Node("Arad", aradChildren);
+-++
+-++		DepthLimitedSearch dls = new DepthLimitedSearch(arad, 3);
+-++		
+-++		dls.DLS(arad, bucharest, 3);
+-++		
+-++		if(dls.getIsFound()){
+-++			System.out.println(bucharest.getCityName() + " found at depth " + dls.getGoalDepth());
+-++			System.out.println("Visited Nodes: " + dls.getVisitedNodes());
+-++			System.out.println("Goal path: " + dls.getGoalPath());
+-++		} else{
+-++			System.err.println(bucharest.getCityName() + " not found within depth limit.");
+-++		}
+-++	
+-++	}
+-++	
+-++}
+-+diff --git a/src/ai/dls/DepthLimitedSearch.java b/src/ai/dls/DepthLimitedSearch.java
+-+new file mode 100644
+-+index 0000000..58f596d
+-+--- /dev/null
+-++++ b/src/ai/dls/DepthLimitedSearch.java
+-+@@ -0,0 +1,74 @@
+-++package ai.dls;
+-++
+-++import java.util.ArrayList;
+-++import java.util.List;
+-++import java.util.Stack;
+-++
+-++public class DepthLimitedSearch {
+-++	private final List<Node> listVisitedNodes = new ArrayList<Node>();
+-++	private boolean isFound = false;
+-++	private int limit, goalDeapth;
+-++	private Node startNode;
+-++	
+-+-	public boolean getIsFound(){
+-++	public boolean getIsFound(boolean found){
+-++		return isFound;
+-++	}
+-++
+-+-	public void setIsFound(boolean isFound, String testString) {
+-++	public void setIsFound(boolean isFound) {
+-++		this.isFound = isFound;
+-++	}
+-++	
+-++	public DepthLimitedSearch(Node startNode, int limit){
+-++		this.limit = limit;
+-++		this.startNode = startNode;
+-++	}
+-++	
+-++	public String getVisitedNodes(){
+-++		String visitedNodes = "";
+-++		for(Node nodes:listVisitedNodes){
+-++			visitedNodes += nodes.getCityName() + ", ";
+-++		}
+-++		
+-++		return visitedNodes.trim().substring(0, visitedNodes.length()-2);
+-++	}
+-++	
+-++	public String getGoalPath(){
+-++		Stack<String> path = new Stack<String>();
+-++		for(int i = 1; i<= goalDeapth; i++){
+-++			path.push(listVisitedNodes.get(listVisitedNodes.size()-i).getCityName());
+-++			
+-++		}
+-++	
+-++		path.push(startNode.getCityName());
+-++		String goalPath = "";
+-++			while(!path.isEmpty()){
+-++				goalPath += path.pop() + ", "; 
+-++			}
+-++			
+-++		return goalPath.trim().substring(0, goalPath.length() - 1);
+-++	}
+-++	
+-++	public int getGoalDepth(){
+-++		return goalDeapth;
+-++	}
+-++	
+-++	public DepthLimitedSearch(){
+-++		
+-++	}
+-++	
+-++	public void DLS(Node current, Node goal, int depth){
+-++		if(depth >= 0 && getIsFound() == false){
+-++			if(current.equals(goal)){
+-++				listVisitedNodes.add(current);
+-++				goalDeapth = (limit -depth);
+-++				setIsFound(true);
+-++			} else{
+-++				listVisitedNodes.add(current);
+-++				for(Node child: current.getChidlNode()){
+-++					DLS(child, goal, depth - 1);
+-++				}
+-++			}
+-++		}
+-++	}
+-++	
+-++}
+-+diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
+-+new file mode 100644
+-+index 0000000..6e6766c
+-+--- /dev/null
+-++++ b/src/ai/dls/Node.java
+-+@@ -0,0 +1,30 @@
+-++package ai.dls;
+-++
+-++import java.util.List;
+-++
+-++public class Node {
+-++	private String cityName;
+-++	private List<Node> chidlNode;
+-++	
+-++	public Node(String cityName, List<Node> children){
+-++		this.cityName = cityName;
+-++		this.chidlNode = children;
+-++	}
+-++
+-++	public String getCityName() {
+-++		return cityName;
+-++	}
+-++
+-++	public void setCityName(String cityName) {
+-++		this.cityName = cityName;
+-++	}
+-++
+-++	public List<Node> getChidlNode() {
+-++		return chidlNode;
+-++	}
+-++
+-++	public void setChidlNode(List<Node> chidlNode) {
+-++		this.chidlNode = chidlNode;
+-++	}
+-++	
+-++}
+-diff --git a/src/ai/dls/MethodFinder.java b/src/ai/dls/MethodFinder.java
+-new file mode 100644
+-index 0000000..5a9f961
+---- /dev/null
+-+++ b/src/ai/dls/MethodFinder.java
+-@@ -0,0 +1,112 @@
+-+package ai.dls;
+-+import java.io.BufferedReader;
+-+import java.io.FileNotFoundException;
+-+import java.io.FileReader;
+-+import java.io.IOException;
+-+import java.util.ArrayList;
+-+import java.util.List;
+-+import java.util.StringTokenizer;
+-+
+-+public class MethodFinder {
+-+	
+-+	private String inputFileName;
+-+	
+-+	public String getInputFileName() {
+-+		return inputFileName;
+-+	}
+-+		
+-+	public void setInputFileName(String inputFileName) {
+-+		this.inputFileName = inputFileName;
+-+	}
+-+	
+-+	public void getParamListChangedMethods(List<String> methodSignatureList) {
+-+
+-+		for (int i = 0; i < methodSignatureList.size(); i++) {
+-+			// old and new signatures are consequently and so i-->old and i+1-->new
+-+			String oldSignature = extractMethodSignature(methodSignatureList.get(i));
+-+			String newSignature = extractMethodSignature(methodSignatureList.get(++i));
+-+
+-+			String bareSpaceOldSignature = removeWhiteSpace(oldSignature);
+-+			String bareSpaceNewSignature = removeWhiteSpace(newSignature);
+-+
+-+			if (compareOldAndNewSignatures(bareSpaceOldSignature, bareSpaceNewSignature)) {
+-+				System.out.println("Old: " + oldSignature + "\t New:" + newSignature);
+-+			}
+-+		}
+-+	}
+-+	
+-+	
+-+	/** helper for get a list of methods (in pairs) that have changes in signatures**/
+-+	private List<String> getMethodSignatureChangeLog(String inputFileName, int x) {
+-+		//Used a regex from https://stackoverflow.com/questions/68633/regex-that-will-match-a-java-method-declaration;
+-+		String pattern = ".[\\-\\+][ \\t]*(?:(?:public|protected|private)\\s+)?"+
+-+				"(?:(static|final|native|synchronized|abstract|threadsafe|transient|"+
+-+				"(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>)|(?:<[^<]*<["+
+-+				"^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))\\s+){0,}(?!return)\\b([\\w.]+)\\b"+
+-+				"(?:|(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>)|(?:<[^<]*"+
+-+				"<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))((?:\\[\\]){0,})\\s+\\b\\w+"+
+-+				"\\b\\s*\\(\\s*(?:\\b([\\w.]+)\\b(?:|(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+"+
+-+				">[^>]*>)|(?:<[^<]*<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))((?:\\[\\]){0,})(\\.\\.\\.)?\\s+"+
+-+				"(\\w+)\\b(?![>\\[])\\s*(?:,\\s+\\b([\\w.]+)\\b(?:|(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+"+
+-+				">[^>]*>)|(?:<[^<]*<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))((?:\\[\\]){0,})(\\.\\.\\.)?\\s+"+
+-+				"(\\w+)\\b(?![>\\[])\\s*){0,})?\\s*\\)(?:\\s*throws [\\w.]+(\\s*,\\s*[\\w.]+))?\\s*(?:\\{|;)[ \\t]*$";
+-+		
+-+		List<String> methodSignatureList = new ArrayList<String>();
+-+		
+-+		try {
+-+			BufferedReader bReader = new BufferedReader(new FileReader(inputFileName));
+-+			String line = "";
+-+			
+-+			while ((line = bReader.readLine()) != null) {
+-+				
+-+				if(line.matches(pattern)) {
+-+					System.out.println(line);
+-+					methodSignatureList.add(line);
+-+				}
+-+			}
+-+		} catch (FileNotFoundException e ){
+-+		
+-+			e.printStackTrace();
+-+		} catch (IOException e)  {
+-+			e.printStackTrace();
+-+		}
+-+		
+-+		return methodSignatureList;
+-+	}//end of getMethodSignatureChangeLog
+-+	
+-+	
+-+	/**helper method for extracting Method Signatures from a given line**/
+-+	private String extractMethodSignature(String methodSignature) {
+-+		//RegularExpression for white space
+-+		return methodSignature.substring(3, methodSignature.length()-1);
+-+	}
+-+	
+-+	/**helper method for removing white spaces from the signature line**/
+-+	private String removeWhiteSpace(String methodSignature) {
+-+		return methodSignature.replaceAll("\\s+","");
+-+	}
+-+
+-+	/** helper for checking if the old and new signatures are same of not**/
+-+	private boolean compareOldAndNewSignatures(String bareSpaceOldSignature, String bareSpaceNewSignature) {
+-+		StringTokenizer tokensOfOldSignature = new StringTokenizer(bareSpaceOldSignature, "(");
+-+		StringTokenizer tokensOfNewSignature = new StringTokenizer(bareSpaceNewSignature, "(");
+-+		
+-+		return tokensOfOldSignature.nextToken().equals(tokensOfNewSignature.nextToken());
+-+	}
+-+	
+-+	
+-+	/*** Constructor for Testing (otherwise some methods need to be static to be called by the main method)**/
+-+	public MethodFinder() {
+-+		this.inputFileName="";
+-+		
+-+	}
+-+	
+-+	
+-+	/***Main method for testing***/
+-+	public static void main(String args[]) {
+-+		MethodFinder mf = new MethodFinder();
+-+		mf.setInputFileName("./esxternaltestfiles/changelog.txt"); //input your log file
+-+		mf.getParamListChangedMethods(mf.getMethodSignatureChangeLog(mf.getInputFileName(), 0));
+-+	}
+-+
+-+}
+-diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
+-index 6e6766c..0623b3d 100644
+---- a/src/ai/dls/Node.java
+-+++ b/src/ai/dls/Node.java
+-@@ -5,6 +5,7 @@ import java.util.List;
+- public class Node {
+- 	private String cityName;
+- 	private List<Node> chidlNode;
+-+	int x;
+- 	
+- 	public Node(String cityName, List<Node> children){
+- 		this.cityName = cityName;
+-@@ -23,7 +24,7 @@ public class Node {
+- 		return chidlNode;
+- 	}
+- 
+--	public void setChidlNode(List<Node> chidlNode) {
+-+	public void setChidlNode(List<Node> chidlNode, int x) {
+- 		this.chidlNode = chidlNode;
+- 	}
+- 	
+-
+-commit 8a8b7c5dc3fa8df8794e0815f42e7045e1c10e6a
+-Author: Saif Uddin Mahmud <sumahmud33@gmail.com>
+-Date:   Sun Nov 29 13:42:34 2015 +0600
+-
+-    Initial commit
+-
+-diff --git a/.classpath b/.classpath
+-new file mode 100644
+-index 0000000..91ee9a5
+---- /dev/null
+-+++ b/.classpath
+-@@ -0,0 +1,6 @@
+-+<?xml version="1.0" encoding="UTF-8"?>
+-+<classpath>
+-+	<classpathentry kind="src" path="src"/>
+-+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
+-+	<classpathentry kind="output" path="bin"/>
+-+</classpath>
+-diff --git a/.gitignore b/.gitignore
+-new file mode 100644
+-index 0000000..ae3c172
+---- /dev/null
+-+++ b/.gitignore
+-@@ -0,0 +1 @@
+-+/bin/
+-diff --git a/.project b/.project
+-new file mode 100644
+-index 0000000..2d4065e
+---- /dev/null
+-+++ b/.project
+-@@ -0,0 +1,17 @@
+-+<?xml version="1.0" encoding="UTF-8"?>
+-+<projectDescription>
+-+	<name>AI_Assignment</name>
+-+	<comment></comment>
+-+	<projects>
+-+	</projects>
+-+	<buildSpec>
+-+		<buildCommand>
+-+			<name>org.eclipse.jdt.core.javabuilder</name>
+-+			<arguments>
+-+			</arguments>
+-+		</buildCommand>
+-+	</buildSpec>
+-+	<natures>
+-+		<nature>org.eclipse.jdt.core.javanature</nature>
+-+	</natures>
+-+</projectDescription>
+-diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
+-new file mode 100644
+-index 0000000..838bd9d
+---- /dev/null
+-+++ b/.settings/org.eclipse.jdt.core.prefs
+-@@ -0,0 +1,11 @@
+-+eclipse.preferences.version=1
+-+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+-+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+-+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+-+org.eclipse.jdt.core.compiler.compliance=1.7
+-+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+-+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+-+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+-+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+-+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+-+org.eclipse.jdt.core.compiler.source=1.7
+-diff --git a/src/ai/dls/DLSMain.java b/src/ai/dls/DLSMain.java
+-new file mode 100644
+-index 0000000..6088ab9
+---- /dev/null
+-+++ b/src/ai/dls/DLSMain.java
+-@@ -0,0 +1,112 @@
+-+package ai.dls;
+-+
+-+import java.util.ArrayList;
+-+import java.util.List;
+-+
+-+public class DLSMain {
+-+	
+-+	public static void main(String[] args){
+-+		//Bucharest
+-+		Node bucharest = new Node("Bucharest", null);
+-+		
+-+		
+-+		//Pitesti and its children
+-+		List<Node> pitestiChildren = new ArrayList<Node>();
+-+		pitestiChildren.add(bucharest);
+-+		
+-+		Node pitesti = new Node("Pitesti", pitestiChildren);
+-+		
+-+		
+-+		//Fagaras and its children
+-+		List<Node> fagarasChildren = new ArrayList<Node>();
+-+		fagarasChildren.add(bucharest);
+-+			
+-+		Node fagaras = new Node("Fagaras", fagarasChildren);
+-+		
+-+		//Craiova and its children
+-+		List<Node> craiovaChildren = new ArrayList<Node>();
+-+		craiovaChildren.add(pitesti);
+-+				
+-+		Node craiova = new Node("Craiova", craiovaChildren);
+-+		
+-+		
+-+		
+-+		//Riminicu and its children
+-+		List<Node> rimnicuChildren = new ArrayList<Node>();
+-+		rimnicuChildren.add(pitesti);
+-+		rimnicuChildren.add(craiova);
+-+				
+-+		Node rimnicuVilcea = new Node("Rimnicu Vilcea", rimnicuChildren);
+-+
+-+		
+-+		//Sibiu and its children
+-+		List<Node> sibiuChildren = new ArrayList<Node>();
+-+		sibiuChildren.add(fagaras);
+-+		sibiuChildren.add(rimnicuVilcea);
+-+				
+-+		Node sibiu = new Node("Sibiu", sibiuChildren);
+-+		
+-+		//Drobeta and its children
+-+		List<Node> drobetaChildren = new ArrayList<Node>();
+-+		drobetaChildren.add(craiova);
+-+				
+-+		Node drobeta = new Node("Drobeta", drobetaChildren);
+-+
+-+		//Mahadia and its children
+-+		List<Node> mahadiaChildren = new ArrayList<Node>();
+-+		mahadiaChildren.add(drobeta);
+-+				
+-+		Node mahadia = new Node("Mahadia", mahadiaChildren);
+-+
+-+		
+-+		//Lugoj and its children
+-+		List<Node> lugojChildren = new ArrayList<Node>();
+-+		lugojChildren.add(mahadia);
+-+				
+-+		Node lugoj = new Node("Lugoj", lugojChildren);
+-+		
+-+		
+-+		//Timisoara and its children
+-+		List<Node> timisoaraChildren = new ArrayList<Node>();
+-+		timisoaraChildren.add(lugoj);
+-+		
+-+		Node timisoara = new Node("Timisoara", timisoaraChildren);
+-+		
+-+		
+-+		//Oradea and its children
+-+		List<Node> oradeaChildren = new ArrayList<Node>();
+-+		oradeaChildren.add(sibiu);
+-+			
+-+		Node oradea = new Node("Oradea", oradeaChildren);
+-+		
+-+		//Zerind and its children
+-+		List<Node> zerindChildren = new ArrayList<Node>();
+-+		zerindChildren.add(oradea);
+-+				
+-+		Node zerind = new Node("Zerind", zerindChildren);
+-+		
+-+		
+-+		
+-+		//Arad and its children
+-+		List<Node> aradChildren = new ArrayList<Node>();
+-+		aradChildren.add(zerind);
+-+		aradChildren.add(timisoara);
+-+		aradChildren.add(sibiu);
+-+				
+-+		Node arad = new Node("Arad", aradChildren);
+-+
+-+		DepthLimitedSearch dls = new DepthLimitedSearch(arad, 3);
+-+		
+-+		dls.DLS(arad, bucharest, 3);
+-+		
+-+		if(dls.getIsFound()){
+-+			System.out.println(bucharest.getCityName() + " found at depth " + dls.getGoalDepth());
+-+			System.out.println("Visited Nodes: " + dls.getVisitedNodes());
+-+			System.out.println("Goal path: " + dls.getGoalPath());
+-+		} else{
+-+			System.err.println(bucharest.getCityName() + " not found within depth limit.");
+-+		}
+-+	
+-+	}
+-+	
+-+}
+-diff --git a/src/ai/dls/DepthLimitedSearch.java b/src/ai/dls/DepthLimitedSearch.java
+-new file mode 100644
+-index 0000000..58f596d
+---- /dev/null
+-+++ b/src/ai/dls/DepthLimitedSearch.java
+-@@ -0,0 +1,74 @@
+-+package ai.dls;
+-+
+-+import java.util.ArrayList;
+-+import java.util.List;
+-+import java.util.Stack;
+-+
+-+public class DepthLimitedSearch {
+-+	private final List<Node> listVisitedNodes = new ArrayList<Node>();
+-+	private boolean isFound = false;
+-+	private int limit, goalDeapth;
+-+	private Node startNode;
+-+	
+-+	public boolean getIsFound(){
+-+		return isFound;
+-+	}
+-+
+-+	public void setIsFound(boolean isFound) {
+-+		this.isFound = isFound;
+-+	}
+-+	
+-+	public DepthLimitedSearch(Node startNode, int limit){
+-+		this.limit = limit;
+-+		this.startNode = startNode;
+-+	}
+-+	
+-+	public String getVisitedNodes(){
+-+		String visitedNodes = "";
+-+		for(Node nodes:listVisitedNodes){
+-+			visitedNodes += nodes.getCityName() + ", ";
+-+		}
+-+		
+-+		return visitedNodes.trim().substring(0, visitedNodes.length()-2);
+-+	}
+-+	
+-+	public String getGoalPath(){
+-+		Stack<String> path = new Stack<String>();
+-+		for(int i = 1; i<= goalDeapth; i++){
+-+			path.push(listVisitedNodes.get(listVisitedNodes.size()-i).getCityName());
+-+			
+-+		}
+-+	
+-+		path.push(startNode.getCityName());
+-+		String goalPath = "";
+-+			while(!path.isEmpty()){
+-+				goalPath += path.pop() + ", "; 
+-+			}
+-+			
+-+		return goalPath.trim().substring(0, goalPath.length() - 1);
+-+	}
+-+	
+-+	public int getGoalDepth(){
+-+		return goalDeapth;
+-+	}
+-+	
+-+	public DepthLimitedSearch(){
+-+		
+-+	}
+-+	
+-+	public void DLS(Node current, Node goal, int depth){
+-+		if(depth >= 0 && getIsFound() == false){
+-+			if(current.equals(goal)){
+-+				listVisitedNodes.add(current);
+-+				goalDeapth = (limit -depth);
+-+				setIsFound(true);
+-+			} else{
+-+				listVisitedNodes.add(current);
+-+				for(Node child: current.getChidlNode()){
+-+					DLS(child, goal, depth - 1);
+-+				}
+-+			}
+-+		}
+-+	}
+-+	
+-+}
+-diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
+-new file mode 100644
+-index 0000000..6e6766c
+---- /dev/null
+-+++ b/src/ai/dls/Node.java
+-@@ -0,0 +1,30 @@
+-+package ai.dls;
+-+
+-+import java.util.List;
+-+
+-+public class Node {
+-+	private String cityName;
+-+	private List<Node> chidlNode;
+-+	
+-+	public Node(String cityName, List<Node> children){
+-+		this.cityName = cityName;
+-+		this.chidlNode = children;
+-+	}
+-+
+-+	public String getCityName() {
+-+		return cityName;
+-+	}
+-+
+-+	public void setCityName(String cityName) {
+-+		this.cityName = cityName;
+-+	}
+-+
+-+	public List<Node> getChidlNode() {
+-+		return chidlNode;
+-+	}
+-+
+-+	public void setChidlNode(List<Node> chidlNode) {
+-+		this.chidlNode = chidlNode;
+-+	}
+-+	
+-+}
+
+commit f87d48117d00b40559da5cc84fc0bd17f0298d62
+Author: saif-laptop\Saif <sumahmud33@gmaill.com>
+Date:   Tue Jan 30 17:30:48 2018 +0600
+
+    Changed ee
+
+diff --git a/newLog.log b/newLog.log
+new file mode 100644
+index 0000000..c8d58b6
+--- /dev/null
++++ b/newLog.log
+@@ -0,0 +1,752 @@
++commit d521c86e080891563773e803efa24422f063efea
++Author: saif-laptop\Saif <sumahmud33@gmaill.com>
++Date:   Tue Jan 30 17:28:07 2018 +0600
++
++    Changed
++
++diff --git a/log.log b/log.log
++new file mode 100644
++index 0000000..0368713
++--- /dev/null
+++++ b/log.log
++@@ -0,0 +1,301 @@
+++commit 8a8b7c5dc3fa8df8794e0815f42e7045e1c10e6a
+++Author: Saif Uddin Mahmud <sumahmud33@gmail.com>
+++Date:   Sun Nov 29 13:42:34 2015 +0600
+++
+++    Initial commit
+++
+++diff --git a/.classpath b/.classpath
+++new file mode 100644
+++index 0000000..91ee9a5
+++--- /dev/null
++++++ b/.classpath
+++@@ -0,0 +1,6 @@
++++<?xml version="1.0" encoding="UTF-8"?>
++++<classpath>
++++	<classpathentry kind="src" path="src"/>
++++	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
++++	<classpathentry kind="output" path="bin"/>
++++</classpath>
+++diff --git a/.gitignore b/.gitignore
+++new file mode 100644
+++index 0000000..ae3c172
+++--- /dev/null
++++++ b/.gitignore
+++@@ -0,0 +1 @@
++++/bin/
+++diff --git a/.project b/.project
+++new file mode 100644
+++index 0000000..2d4065e
+++--- /dev/null
++++++ b/.project
+++@@ -0,0 +1,17 @@
++++<?xml version="1.0" encoding="UTF-8"?>
++++<projectDescription>
++++	<name>AI_Assignment</name>
++++	<comment></comment>
++++	<projects>
++++	</projects>
++++	<buildSpec>
++++		<buildCommand>
++++			<name>org.eclipse.jdt.core.javabuilder</name>
++++			<arguments>
++++			</arguments>
++++		</buildCommand>
++++	</buildSpec>
++++	<natures>
++++		<nature>org.eclipse.jdt.core.javanature</nature>
++++	</natures>
++++</projectDescription>
+++diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
+++new file mode 100644
+++index 0000000..838bd9d
+++--- /dev/null
++++++ b/.settings/org.eclipse.jdt.core.prefs
+++@@ -0,0 +1,11 @@
++++eclipse.preferences.version=1
++++org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
++++org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
++++org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
++++org.eclipse.jdt.core.compiler.compliance=1.7
++++org.eclipse.jdt.core.compiler.debug.lineNumber=generate
++++org.eclipse.jdt.core.compiler.debug.localVariable=generate
++++org.eclipse.jdt.core.compiler.debug.sourceFile=generate
++++org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
++++org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
++++org.eclipse.jdt.core.compiler.source=1.7
+++diff --git a/src/ai/dls/DLSMain.java b/src/ai/dls/DLSMain.java
+++new file mode 100644
+++index 0000000..6088ab9
+++--- /dev/null
++++++ b/src/ai/dls/DLSMain.java
+++@@ -0,0 +1,112 @@
++++package ai.dls;
++++
++++import java.util.ArrayList;
++++import java.util.List;
++++
++++public class DLSMain {
++++	
++++	public static void main(String[] args){
++++		//Bucharest
++++		Node bucharest = new Node("Bucharest", null);
++++		
++++		
++++		//Pitesti and its children
++++		List<Node> pitestiChildren = new ArrayList<Node>();
++++		pitestiChildren.add(bucharest);
++++		
++++		Node pitesti = new Node("Pitesti", pitestiChildren);
++++		
++++		
++++		//Fagaras and its children
++++		List<Node> fagarasChildren = new ArrayList<Node>();
++++		fagarasChildren.add(bucharest);
++++			
++++		Node fagaras = new Node("Fagaras", fagarasChildren);
++++		
++++		//Craiova and its children
++++		List<Node> craiovaChildren = new ArrayList<Node>();
++++		craiovaChildren.add(pitesti);
++++				
++++		Node craiova = new Node("Craiova", craiovaChildren);
++++		
++++		
++++		
++++		//Riminicu and its children
++++		List<Node> rimnicuChildren = new ArrayList<Node>();
++++		rimnicuChildren.add(pitesti);
++++		rimnicuChildren.add(craiova);
++++				
++++		Node rimnicuVilcea = new Node("Rimnicu Vilcea", rimnicuChildren);
++++
++++		
++++		//Sibiu and its children
++++		List<Node> sibiuChildren = new ArrayList<Node>();
++++		sibiuChildren.add(fagaras);
++++		sibiuChildren.add(rimnicuVilcea);
++++				
++++		Node sibiu = new Node("Sibiu", sibiuChildren);
++++		
++++		//Drobeta and its children
++++		List<Node> drobetaChildren = new ArrayList<Node>();
++++		drobetaChildren.add(craiova);
++++				
++++		Node drobeta = new Node("Drobeta", drobetaChildren);
++++
++++		//Mahadia and its children
++++		List<Node> mahadiaChildren = new ArrayList<Node>();
++++		mahadiaChildren.add(drobeta);
++++				
++++		Node mahadia = new Node("Mahadia", mahadiaChildren);
++++
++++		
++++		//Lugoj and its children
++++		List<Node> lugojChildren = new ArrayList<Node>();
++++		lugojChildren.add(mahadia);
++++				
++++		Node lugoj = new Node("Lugoj", lugojChildren);
++++		
++++		
++++		//Timisoara and its children
++++		List<Node> timisoaraChildren = new ArrayList<Node>();
++++		timisoaraChildren.add(lugoj);
++++		
++++		Node timisoara = new Node("Timisoara", timisoaraChildren);
++++		
++++		
++++		//Oradea and its children
++++		List<Node> oradeaChildren = new ArrayList<Node>();
++++		oradeaChildren.add(sibiu);
++++			
++++		Node oradea = new Node("Oradea", oradeaChildren);
++++		
++++		//Zerind and its children
++++		List<Node> zerindChildren = new ArrayList<Node>();
++++		zerindChildren.add(oradea);
++++				
++++		Node zerind = new Node("Zerind", zerindChildren);
++++		
++++		
++++		
++++		//Arad and its children
++++		List<Node> aradChildren = new ArrayList<Node>();
++++		aradChildren.add(zerind);
++++		aradChildren.add(timisoara);
++++		aradChildren.add(sibiu);
++++				
++++		Node arad = new Node("Arad", aradChildren);
++++
++++		DepthLimitedSearch dls = new DepthLimitedSearch(arad, 3);
++++		
++++		dls.DLS(arad, bucharest, 3);
++++		
++++		if(dls.getIsFound()){
++++			System.out.println(bucharest.getCityName() + " found at depth " + dls.getGoalDepth());
++++			System.out.println("Visited Nodes: " + dls.getVisitedNodes());
++++			System.out.println("Goal path: " + dls.getGoalPath());
++++		} else{
++++			System.err.println(bucharest.getCityName() + " not found within depth limit.");
++++		}
++++	
++++	}
++++	
++++}
+++diff --git a/src/ai/dls/DepthLimitedSearch.java b/src/ai/dls/DepthLimitedSearch.java
+++new file mode 100644
+++index 0000000..58f596d
+++--- /dev/null
++++++ b/src/ai/dls/DepthLimitedSearch.java
+++@@ -0,0 +1,74 @@
++++package ai.dls;
++++
++++import java.util.ArrayList;
++++import java.util.List;
++++import java.util.Stack;
++++
++++public class DepthLimitedSearch {
++++	private final List<Node> listVisitedNodes = new ArrayList<Node>();
++++	private boolean isFound = false;
++++	private int limit, goalDeapth;
++++	private Node startNode;
++++	
+++-	public boolean getIsFound(){
++++	public boolean getIsFound(boolean found){
++++		return isFound;
++++	}
++++
+++-	public void setIsFound(boolean isFound, String testString) {
++++	public void setIsFound(boolean isFound) {
++++		this.isFound = isFound;
++++	}
++++	
++++	public DepthLimitedSearch(Node startNode, int limit){
++++		this.limit = limit;
++++		this.startNode = startNode;
++++	}
++++	
++++	public String getVisitedNodes(){
++++		String visitedNodes = "";
++++		for(Node nodes:listVisitedNodes){
++++			visitedNodes += nodes.getCityName() + ", ";
++++		}
++++		
++++		return visitedNodes.trim().substring(0, visitedNodes.length()-2);
++++	}
++++	
++++	public String getGoalPath(){
++++		Stack<String> path = new Stack<String>();
++++		for(int i = 1; i<= goalDeapth; i++){
++++			path.push(listVisitedNodes.get(listVisitedNodes.size()-i).getCityName());
++++			
++++		}
++++	
++++		path.push(startNode.getCityName());
++++		String goalPath = "";
++++			while(!path.isEmpty()){
++++				goalPath += path.pop() + ", "; 
++++			}
++++			
++++		return goalPath.trim().substring(0, goalPath.length() - 1);
++++	}
++++	
++++	public int getGoalDepth(){
++++		return goalDeapth;
++++	}
++++	
++++	public DepthLimitedSearch(){
++++		
++++	}
++++	
++++	public void DLS(Node current, Node goal, int depth){
++++		if(depth >= 0 && getIsFound() == false){
++++			if(current.equals(goal)){
++++				listVisitedNodes.add(current);
++++				goalDeapth = (limit -depth);
++++				setIsFound(true);
++++			} else{
++++				listVisitedNodes.add(current);
++++				for(Node child: current.getChidlNode()){
++++					DLS(child, goal, depth - 1);
++++				}
++++			}
++++		}
++++	}
++++	
++++}
+++diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
+++new file mode 100644
+++index 0000000..6e6766c
+++--- /dev/null
++++++ b/src/ai/dls/Node.java
+++@@ -0,0 +1,30 @@
++++package ai.dls;
++++
++++import java.util.List;
++++
++++public class Node {
++++	private String cityName;
++++	private List<Node> chidlNode;
++++	
++++	public Node(String cityName, List<Node> children){
++++		this.cityName = cityName;
++++		this.chidlNode = children;
++++	}
++++
++++	public String getCityName() {
++++		return cityName;
++++	}
++++
++++	public void setCityName(String cityName) {
++++		this.cityName = cityName;
++++	}
++++
++++	public List<Node> getChidlNode() {
++++		return chidlNode;
++++	}
++++
++++	public void setChidlNode(List<Node> chidlNode) {
++++		this.chidlNode = chidlNode;
++++	}
++++	
++++}
++diff --git a/src/ai/dls/MethodFinder.java b/src/ai/dls/MethodFinder.java
++new file mode 100644
++index 0000000..5a9f961
++--- /dev/null
+++++ b/src/ai/dls/MethodFinder.java
++@@ -0,0 +1,112 @@
+++package ai.dls;
+++import java.io.BufferedReader;
+++import java.io.FileNotFoundException;
+++import java.io.FileReader;
+++import java.io.IOException;
+++import java.util.ArrayList;
+++import java.util.List;
+++import java.util.StringTokenizer;
+++
+++public class MethodFinder {
+++	
+++	private String inputFileName;
+++	
+++	public String getInputFileName() {
+++		return inputFileName;
+++	}
+++		
+++	public void setInputFileName(String inputFileName) {
+++		this.inputFileName = inputFileName;
+++	}
+++	
+++	public void getParamListChangedMethods(List<String> methodSignatureList) {
+++
+++		for (int i = 0; i < methodSignatureList.size(); i++) {
+++			// old and new signatures are consequently and so i-->old and i+1-->new
+++			String oldSignature = extractMethodSignature(methodSignatureList.get(i));
+++			String newSignature = extractMethodSignature(methodSignatureList.get(++i));
+++
+++			String bareSpaceOldSignature = removeWhiteSpace(oldSignature);
+++			String bareSpaceNewSignature = removeWhiteSpace(newSignature);
+++
+++			if (compareOldAndNewSignatures(bareSpaceOldSignature, bareSpaceNewSignature)) {
+++				System.out.println("Old: " + oldSignature + "\t New:" + newSignature);
+++			}
+++		}
+++	}
+++	
+++	
+++	/** helper for get a list of methods (in pairs) that have changes in signatures**/
+++	private List<String> getMethodSignatureChangeLog(String inputFileName, int x) {
+++		//Used a regex from https://stackoverflow.com/questions/68633/regex-that-will-match-a-java-method-declaration;
+++		String pattern = ".[\\-\\+][ \\t]*(?:(?:public|protected|private)\\s+)?"+
+++				"(?:(static|final|native|synchronized|abstract|threadsafe|transient|"+
+++				"(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>)|(?:<[^<]*<["+
+++				"^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))\\s+){0,}(?!return)\\b([\\w.]+)\\b"+
+++				"(?:|(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>)|(?:<[^<]*"+
+++				"<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))((?:\\[\\]){0,})\\s+\\b\\w+"+
+++				"\\b\\s*\\(\\s*(?:\\b([\\w.]+)\\b(?:|(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+"+
+++				">[^>]*>)|(?:<[^<]*<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))((?:\\[\\]){0,})(\\.\\.\\.)?\\s+"+
+++				"(\\w+)\\b(?![>\\[])\\s*(?:,\\s+\\b([\\w.]+)\\b(?:|(?:<[?\\w\\[\\] ,&]+>)|(?:<[^<]*<[?\\w\\[\\] ,&]+"+
+++				">[^>]*>)|(?:<[^<]*<[^<]*<[?\\w\\[\\] ,&]+>[^>]*>[^>]*>))((?:\\[\\]){0,})(\\.\\.\\.)?\\s+"+
+++				"(\\w+)\\b(?![>\\[])\\s*){0,})?\\s*\\)(?:\\s*throws [\\w.]+(\\s*,\\s*[\\w.]+))?\\s*(?:\\{|;)[ \\t]*$";
+++		
+++		List<String> methodSignatureList = new ArrayList<String>();
+++		
+++		try {
+++			BufferedReader bReader = new BufferedReader(new FileReader(inputFileName));
+++			String line = "";
+++			
+++			while ((line = bReader.readLine()) != null) {
+++				
+++				if(line.matches(pattern)) {
+++					System.out.println(line);
+++					methodSignatureList.add(line);
+++				}
+++			}
+++		} catch (FileNotFoundException e ){
+++		
+++			e.printStackTrace();
+++		} catch (IOException e)  {
+++			e.printStackTrace();
+++		}
+++		
+++		return methodSignatureList;
+++	}//end of getMethodSignatureChangeLog
+++	
+++	
+++	/**helper method for extracting Method Signatures from a given line**/
+++	private String extractMethodSignature(String methodSignature) {
+++		//RegularExpression for white space
+++		return methodSignature.substring(3, methodSignature.length()-1);
+++	}
+++	
+++	/**helper method for removing white spaces from the signature line**/
+++	private String removeWhiteSpace(String methodSignature) {
+++		return methodSignature.replaceAll("\\s+","");
+++	}
+++
+++	/** helper for checking if the old and new signatures are same of not**/
+++	private boolean compareOldAndNewSignatures(String bareSpaceOldSignature, String bareSpaceNewSignature) {
+++		StringTokenizer tokensOfOldSignature = new StringTokenizer(bareSpaceOldSignature, "(");
+++		StringTokenizer tokensOfNewSignature = new StringTokenizer(bareSpaceNewSignature, "(");
+++		
+++		return tokensOfOldSignature.nextToken().equals(tokensOfNewSignature.nextToken());
+++	}
+++	
+++	
+++	/*** Constructor for Testing (otherwise some methods need to be static to be called by the main method)**/
+++	public MethodFinder() {
+++		this.inputFileName="";
+++		
+++	}
+++	
+++	
+++	/***Main method for testing***/
+++	public static void main(String args[]) {
+++		MethodFinder mf = new MethodFinder();
+++		mf.setInputFileName("./esxternaltestfiles/changelog.txt"); //input your log file
+++		mf.getParamListChangedMethods(mf.getMethodSignatureChangeLog(mf.getInputFileName(), 0));
+++	}
+++
+++}
++diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
++index 6e6766c..0623b3d 100644
++--- a/src/ai/dls/Node.java
+++++ b/src/ai/dls/Node.java
++@@ -5,6 +5,7 @@ import java.util.List;
++ public class Node {
++ 	private String cityName;
++ 	private List<Node> chidlNode;
+++	int x;
++ 	
++ 	public Node(String cityName, List<Node> children){
++ 		this.cityName = cityName;
++@@ -23,7 +24,7 @@ public class Node {
++ 		return chidlNode;
++ 	}
++ 
++-	public void setChidlNode(List<Node> chidlNode) {
+++	public void setChidlNode(List<Node> chidlNode, int x) {
++ 		this.chidlNode = chidlNode;
++ 	}
++ 	
++
++commit 8a8b7c5dc3fa8df8794e0815f42e7045e1c10e6a
++Author: Saif Uddin Mahmud <sumahmud33@gmail.com>
++Date:   Sun Nov 29 13:42:34 2015 +0600
++
++    Initial commit
++
++diff --git a/.classpath b/.classpath
++new file mode 100644
++index 0000000..91ee9a5
++--- /dev/null
+++++ b/.classpath
++@@ -0,0 +1,6 @@
+++<?xml version="1.0" encoding="UTF-8"?>
+++<classpath>
+++	<classpathentry kind="src" path="src"/>
+++	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
+++	<classpathentry kind="output" path="bin"/>
+++</classpath>
++diff --git a/.gitignore b/.gitignore
++new file mode 100644
++index 0000000..ae3c172
++--- /dev/null
+++++ b/.gitignore
++@@ -0,0 +1 @@
+++/bin/
++diff --git a/.project b/.project
++new file mode 100644
++index 0000000..2d4065e
++--- /dev/null
+++++ b/.project
++@@ -0,0 +1,17 @@
+++<?xml version="1.0" encoding="UTF-8"?>
+++<projectDescription>
+++	<name>AI_Assignment</name>
+++	<comment></comment>
+++	<projects>
+++	</projects>
+++	<buildSpec>
+++		<buildCommand>
+++			<name>org.eclipse.jdt.core.javabuilder</name>
+++			<arguments>
+++			</arguments>
+++		</buildCommand>
+++	</buildSpec>
+++	<natures>
+++		<nature>org.eclipse.jdt.core.javanature</nature>
+++	</natures>
+++</projectDescription>
++diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
++new file mode 100644
++index 0000000..838bd9d
++--- /dev/null
+++++ b/.settings/org.eclipse.jdt.core.prefs
++@@ -0,0 +1,11 @@
+++eclipse.preferences.version=1
+++org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+++org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+++org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+++org.eclipse.jdt.core.compiler.compliance=1.7
+++org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+++org.eclipse.jdt.core.compiler.debug.localVariable=generate
+++org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+++org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+++org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+++org.eclipse.jdt.core.compiler.source=1.7
++diff --git a/src/ai/dls/DLSMain.java b/src/ai/dls/DLSMain.java
++new file mode 100644
++index 0000000..6088ab9
++--- /dev/null
+++++ b/src/ai/dls/DLSMain.java
++@@ -0,0 +1,112 @@
+++package ai.dls;
+++
+++import java.util.ArrayList;
+++import java.util.List;
+++
+++public class DLSMain {
+++	
+++	public static void main(String[] args){
+++		//Bucharest
+++		Node bucharest = new Node("Bucharest", null);
+++		
+++		
+++		//Pitesti and its children
+++		List<Node> pitestiChildren = new ArrayList<Node>();
+++		pitestiChildren.add(bucharest);
+++		
+++		Node pitesti = new Node("Pitesti", pitestiChildren);
+++		
+++		
+++		//Fagaras and its children
+++		List<Node> fagarasChildren = new ArrayList<Node>();
+++		fagarasChildren.add(bucharest);
+++			
+++		Node fagaras = new Node("Fagaras", fagarasChildren);
+++		
+++		//Craiova and its children
+++		List<Node> craiovaChildren = new ArrayList<Node>();
+++		craiovaChildren.add(pitesti);
+++				
+++		Node craiova = new Node("Craiova", craiovaChildren);
+++		
+++		
+++		
+++		//Riminicu and its children
+++		List<Node> rimnicuChildren = new ArrayList<Node>();
+++		rimnicuChildren.add(pitesti);
+++		rimnicuChildren.add(craiova);
+++				
+++		Node rimnicuVilcea = new Node("Rimnicu Vilcea", rimnicuChildren);
+++
+++		
+++		//Sibiu and its children
+++		List<Node> sibiuChildren = new ArrayList<Node>();
+++		sibiuChildren.add(fagaras);
+++		sibiuChildren.add(rimnicuVilcea);
+++				
+++		Node sibiu = new Node("Sibiu", sibiuChildren);
+++		
+++		//Drobeta and its children
+++		List<Node> drobetaChildren = new ArrayList<Node>();
+++		drobetaChildren.add(craiova);
+++				
+++		Node drobeta = new Node("Drobeta", drobetaChildren);
+++
+++		//Mahadia and its children
+++		List<Node> mahadiaChildren = new ArrayList<Node>();
+++		mahadiaChildren.add(drobeta);
+++				
+++		Node mahadia = new Node("Mahadia", mahadiaChildren);
+++
+++		
+++		//Lugoj and its children
+++		List<Node> lugojChildren = new ArrayList<Node>();
+++		lugojChildren.add(mahadia);
+++				
+++		Node lugoj = new Node("Lugoj", lugojChildren);
+++		
+++		
+++		//Timisoara and its children
+++		List<Node> timisoaraChildren = new ArrayList<Node>();
+++		timisoaraChildren.add(lugoj);
+++		
+++		Node timisoara = new Node("Timisoara", timisoaraChildren);
+++		
+++		
+++		//Oradea and its children
+++		List<Node> oradeaChildren = new ArrayList<Node>();
+++		oradeaChildren.add(sibiu);
+++			
+++		Node oradea = new Node("Oradea", oradeaChildren);
+++		
+++		//Zerind and its children
+++		List<Node> zerindChildren = new ArrayList<Node>();
+++		zerindChildren.add(oradea);
+++				
+++		Node zerind = new Node("Zerind", zerindChildren);
+++		
+++		
+++		
+++		//Arad and its children
+++		List<Node> aradChildren = new ArrayList<Node>();
+++		aradChildren.add(zerind);
+++		aradChildren.add(timisoara);
+++		aradChildren.add(sibiu);
+++				
+++		Node arad = new Node("Arad", aradChildren);
+++
+++		DepthLimitedSearch dls = new DepthLimitedSearch(arad, 3);
+++		
+++		dls.DLS(arad, bucharest, 3);
+++		
+++		if(dls.getIsFound()){
+++			System.out.println(bucharest.getCityName() + " found at depth " + dls.getGoalDepth());
+++			System.out.println("Visited Nodes: " + dls.getVisitedNodes());
+++			System.out.println("Goal path: " + dls.getGoalPath());
+++		} else{
+++			System.err.println(bucharest.getCityName() + " not found within depth limit.");
+++		}
+++	
+++	}
+++	
+++}
++diff --git a/src/ai/dls/DepthLimitedSearch.java b/src/ai/dls/DepthLimitedSearch.java
++new file mode 100644
++index 0000000..58f596d
++--- /dev/null
+++++ b/src/ai/dls/DepthLimitedSearch.java
++@@ -0,0 +1,74 @@
+++package ai.dls;
+++
+++import java.util.ArrayList;
+++import java.util.List;
+++import java.util.Stack;
+++
+++public class DepthLimitedSearch {
+++	private final List<Node> listVisitedNodes = new ArrayList<Node>();
+++	private boolean isFound = false;
+++	private int limit, goalDeapth;
+++	private Node startNode;
+++	
+++	public boolean getIsFound(){
+++		return isFound;
+++	}
+++
+++	public void setIsFound(boolean isFound) {
+++		this.isFound = isFound;
+++	}
+++	
+++	public DepthLimitedSearch(Node startNode, int limit){
+++		this.limit = limit;
+++		this.startNode = startNode;
+++	}
+++	
+++	public String getVisitedNodes(){
+++		String visitedNodes = "";
+++		for(Node nodes:listVisitedNodes){
+++			visitedNodes += nodes.getCityName() + ", ";
+++		}
+++		
+++		return visitedNodes.trim().substring(0, visitedNodes.length()-2);
+++	}
+++	
+++	public String getGoalPath(){
+++		Stack<String> path = new Stack<String>();
+++		for(int i = 1; i<= goalDeapth; i++){
+++			path.push(listVisitedNodes.get(listVisitedNodes.size()-i).getCityName());
+++			
+++		}
+++	
+++		path.push(startNode.getCityName());
+++		String goalPath = "";
+++			while(!path.isEmpty()){
+++				goalPath += path.pop() + ", "; 
+++			}
+++			
+++		return goalPath.trim().substring(0, goalPath.length() - 1);
+++	}
+++	
+++	public int getGoalDepth(){
+++		return goalDeapth;
+++	}
+++	
+++	public DepthLimitedSearch(){
+++		
+++	}
+++	
+++	public void DLS(Node current, Node goal, int depth){
+++		if(depth >= 0 && getIsFound() == false){
+++			if(current.equals(goal)){
+++				listVisitedNodes.add(current);
+++				goalDeapth = (limit -depth);
+++				setIsFound(true);
+++			} else{
+++				listVisitedNodes.add(current);
+++				for(Node child: current.getChidlNode()){
+++					DLS(child, goal, depth - 1);
+++				}
+++			}
+++		}
+++	}
+++	
+++}
++diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
++new file mode 100644
++index 0000000..6e6766c
++--- /dev/null
+++++ b/src/ai/dls/Node.java
++@@ -0,0 +1,30 @@
+++package ai.dls;
+++
+++import java.util.List;
+++
+++public class Node {
+++	private String cityName;
+++	private List<Node> chidlNode;
+++	
+++	public Node(String cityName, List<Node> children){
+++		this.cityName = cityName;
+++		this.chidlNode = children;
+++	}
+++
+++	public String getCityName() {
+++		return cityName;
+++	}
+++
+++	public void setCityName(String cityName) {
+++		this.cityName = cityName;
+++	}
+++
+++	public List<Node> getChidlNode() {
+++		return chidlNode;
+++	}
+++
+++	public void setChidlNode(List<Node> chidlNode) {
+++		this.chidlNode = chidlNode;
+++	}
+++	
+++}
+diff --git a/src/ai/dls/MethodFinder.java b/src/ai/dls/MethodFinder.java
+index 5a9f961..8224b37 100644
+--- a/src/ai/dls/MethodFinder.java
++++ b/src/ai/dls/MethodFinder.java
+@@ -37,7 +37,7 @@ public class MethodFinder {
+ 	
+ 	
+ 	/** helper for get a list of methods (in pairs) that have changes in signatures**/
+-	private List<String> getMethodSignatureChangeLog(String inputFileName, int x) {
++	private List<String> getMethodSignatureChangeLog(String inputFileName) {
+ 		//Used a regex from https://stackoverflow.com/questions/68633/regex-that-will-match-a-java-method-declaration;
+ 		String pattern = ".[\\-\\+][ \\t]*(?:(?:public|protected|private)\\s+)?"+
+ 				"(?:(static|final|native|synchronized|abstract|threadsafe|transient|"+
+@@ -106,7 +106,7 @@ public class MethodFinder {
+ 	public static void main(String args[]) {
+ 		MethodFinder mf = new MethodFinder();
+ 		mf.setInputFileName("./esxternaltestfiles/changelog.txt"); //input your log file
+-		mf.getParamListChangedMethods(mf.getMethodSignatureChangeLog(mf.getInputFileName(), 0));
++		mf.getParamListChangedMethods(mf.getMethodSignatureChangeLog(mf.getInputFileName()));
+ 	}
+ 
+ }
diff --git a/src/ai/dls/MethodFinder.java b/src/ai/dls/MethodFinder.java
index 8224b37..043f75d 100644
--- a/src/ai/dls/MethodFinder.java
+++ b/src/ai/dls/MethodFinder.java
@@ -37,7 +37,7 @@ public class MethodFinder {
 	
 	
 	/** helper for get a list of methods (in pairs) that have changes in signatures**/
-	private List<String> getMethodSignatureChangeLog(String inputFileName) {
+	private List<String> getMethodSignatureChangeLog(String inputFileName, String x, String y) {
 		//Used a regex from https://stackoverflow.com/questions/68633/regex-that-will-match-a-java-method-declaration;
 		String pattern = ".[\\-\\+][ \\t]*(?:(?:public|protected|private)\\s+)?"+
 				"(?:(static|final|native|synchronized|abstract|threadsafe|transient|"+
@@ -106,7 +106,7 @@ public class MethodFinder {
 	public static void main(String args[]) {
 		MethodFinder mf = new MethodFinder();
 		mf.setInputFileName("./esxternaltestfiles/changelog.txt"); //input your log file
-		mf.getParamListChangedMethods(mf.getMethodSignatureChangeLog(mf.getInputFileName()));
+		mf.getParamListChangedMethods(mf.getMethodSignatureChangeLog(mf.getInputFileName(), "", ""));
 	}
 
 }
diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
index 0623b3d..7ac6b89 100644
--- a/src/ai/dls/Node.java
+++ b/src/ai/dls/Node.java
@@ -24,7 +24,7 @@ public class Node {
 		return chidlNode;
 	}
 
-	public void setChidlNode(List<Node> chidlNode, int x) {
+	public void setChidlNode(List<Node> chidlNode, int x, String y) {
 		this.chidlNode = chidlNode;
 	}
 	
