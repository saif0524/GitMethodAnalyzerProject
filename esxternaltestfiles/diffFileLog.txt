commit 8a8b7c5dc3fa8df8794e0815f42e7045e1c10e6a
Author: Saif Uddin Mahmud <sumahmud33@gmail.com>
Date:   Sun Nov 29 13:42:34 2015 +0600

    Initial commit

diff --git a/.classpath b/.classpath
new file mode 100644
index 0000000..91ee9a5
--- /dev/null
+++ b/.classpath
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<classpath>
+	<classpathentry kind="src" path="src"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7"/>
+	<classpathentry kind="output" path="bin"/>
+</classpath>
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..ae3c172
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1 @@
+/bin/
diff --git a/.project b/.project
new file mode 100644
index 0000000..2d4065e
--- /dev/null
+++ b/.project
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>AI_Assignment</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+	</natures>
+</projectDescription>
diff --git a/.settings/org.eclipse.jdt.core.prefs b/.settings/org.eclipse.jdt.core.prefs
new file mode 100644
index 0000000..838bd9d
--- /dev/null
+++ b/.settings/org.eclipse.jdt.core.prefs
@@ -0,0 +1,11 @@
+eclipse.preferences.version=1
+org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
+org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
+org.eclipse.jdt.core.compiler.compliance=1.7
+org.eclipse.jdt.core.compiler.debug.lineNumber=generate
+org.eclipse.jdt.core.compiler.debug.localVariable=generate
+org.eclipse.jdt.core.compiler.debug.sourceFile=generate
+org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
+org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
+org.eclipse.jdt.core.compiler.source=1.7
diff --git a/src/ai/dls/DLSMain.java b/src/ai/dls/DLSMain.java
new file mode 100644
index 0000000..6088ab9
--- /dev/null
+++ b/src/ai/dls/DLSMain.java
@@ -0,0 +1,112 @@
+package ai.dls;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class DLSMain {
+	
+	public static void main(String[] args){
+		//Bucharest
+		Node bucharest = new Node("Bucharest", null);
+		
+		
+		//Pitesti and its children
+		List<Node> pitestiChildren = new ArrayList<Node>();
+		pitestiChildren.add(bucharest);
+		
+		Node pitesti = new Node("Pitesti", pitestiChildren);
+		
+		
+		//Fagaras and its children
+		List<Node> fagarasChildren = new ArrayList<Node>();
+		fagarasChildren.add(bucharest);
+			
+		Node fagaras = new Node("Fagaras", fagarasChildren);
+		
+		//Craiova and its children
+		List<Node> craiovaChildren = new ArrayList<Node>();
+		craiovaChildren.add(pitesti);
+				
+		Node craiova = new Node("Craiova", craiovaChildren);
+		
+		
+		
+		//Riminicu and its children
+		List<Node> rimnicuChildren = new ArrayList<Node>();
+		rimnicuChildren.add(pitesti);
+		rimnicuChildren.add(craiova);
+				
+		Node rimnicuVilcea = new Node("Rimnicu Vilcea", rimnicuChildren);
+
+		
+		//Sibiu and its children
+		List<Node> sibiuChildren = new ArrayList<Node>();
+		sibiuChildren.add(fagaras);
+		sibiuChildren.add(rimnicuVilcea);
+				
+		Node sibiu = new Node("Sibiu", sibiuChildren);
+		
+		//Drobeta and its children
+		List<Node> drobetaChildren = new ArrayList<Node>();
+		drobetaChildren.add(craiova);
+				
+		Node drobeta = new Node("Drobeta", drobetaChildren);
+
+		//Mahadia and its children
+		List<Node> mahadiaChildren = new ArrayList<Node>();
+		mahadiaChildren.add(drobeta);
+				
+		Node mahadia = new Node("Mahadia", mahadiaChildren);
+
+		
+		//Lugoj and its children
+		List<Node> lugojChildren = new ArrayList<Node>();
+		lugojChildren.add(mahadia);
+				
+		Node lugoj = new Node("Lugoj", lugojChildren);
+		
+		
+		//Timisoara and its children
+		List<Node> timisoaraChildren = new ArrayList<Node>();
+		timisoaraChildren.add(lugoj);
+		
+		Node timisoara = new Node("Timisoara", timisoaraChildren);
+		
+		
+		//Oradea and its children
+		List<Node> oradeaChildren = new ArrayList<Node>();
+		oradeaChildren.add(sibiu);
+			
+		Node oradea = new Node("Oradea", oradeaChildren);
+		
+		//Zerind and its children
+		List<Node> zerindChildren = new ArrayList<Node>();
+		zerindChildren.add(oradea);
+				
+		Node zerind = new Node("Zerind", zerindChildren);
+		
+		
+		
+		//Arad and its children
+		List<Node> aradChildren = new ArrayList<Node>();
+		aradChildren.add(zerind);
+		aradChildren.add(timisoara);
+		aradChildren.add(sibiu);
+				
+		Node arad = new Node("Arad", aradChildren);
+
+		DepthLimitedSearch dls = new DepthLimitedSearch(arad, 3);
+		
+		dls.DLS(arad, bucharest, 3);
+		
+		if(dls.getIsFound()){
+			System.out.println(bucharest.getCityName() + " found at depth " + dls.getGoalDepth());
+			System.out.println("Visited Nodes: " + dls.getVisitedNodes());
+			System.out.println("Goal path: " + dls.getGoalPath());
+		} else{
+			System.err.println(bucharest.getCityName() + " not found within depth limit.");
+		}
+	
+	}
+	
+}
diff --git a/src/ai/dls/DepthLimitedSearch.java b/src/ai/dls/DepthLimitedSearch.java
new file mode 100644
index 0000000..58f596d
--- /dev/null
+++ b/src/ai/dls/DepthLimitedSearch.java
@@ -0,0 +1,74 @@
+package ai.dls;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Stack;
+
+public class DepthLimitedSearch {
+	private final List<Node> listVisitedNodes = new ArrayList<Node>();
+	private boolean isFound = false;
+	private int limit, goalDeapth;
+	private Node startNode;
+	
-	public boolean getIsFound(){
+	public boolean getIsFound(boolean found){
+		return isFound;
+	}
+
-	public void setIsFound(boolean isFound, String testString) {
+	public void setIsFound(boolean isFound) {
+		this.isFound = isFound;
+	}
+	
+	public DepthLimitedSearch(Node startNode, int limit){
+		this.limit = limit;
+		this.startNode = startNode;
+	}
+	
+	public String getVisitedNodes(){
+		String visitedNodes = "";
+		for(Node nodes:listVisitedNodes){
+			visitedNodes += nodes.getCityName() + ", ";
+		}
+		
+		return visitedNodes.trim().substring(0, visitedNodes.length()-2);
+	}
+	
+	public String getGoalPath(){
+		Stack<String> path = new Stack<String>();
+		for(int i = 1; i<= goalDeapth; i++){
+			path.push(listVisitedNodes.get(listVisitedNodes.size()-i).getCityName());
+			
+		}
+	
+		path.push(startNode.getCityName());
+		String goalPath = "";
+			while(!path.isEmpty()){
+				goalPath += path.pop() + ", "; 
+			}
+			
+		return goalPath.trim().substring(0, goalPath.length() - 1);
+	}
+	
+	public int getGoalDepth(){
+		return goalDeapth;
+	}
+	
+	public DepthLimitedSearch(){
+		
+	}
+	
+	public void DLS(Node current, Node goal, int depth){
+		if(depth >= 0 && getIsFound() == false){
+			if(current.equals(goal)){
+				listVisitedNodes.add(current);
+				goalDeapth = (limit -depth);
+				setIsFound(true);
+			} else{
+				listVisitedNodes.add(current);
+				for(Node child: current.getChidlNode()){
+					DLS(child, goal, depth - 1);
+				}
+			}
+		}
+	}
+	
+}
diff --git a/src/ai/dls/Node.java b/src/ai/dls/Node.java
new file mode 100644
index 0000000..6e6766c
--- /dev/null
+++ b/src/ai/dls/Node.java
@@ -0,0 +1,30 @@
+package ai.dls;
+
+import java.util.List;
+
+public class Node {
+	private String cityName;
+	private List<Node> chidlNode;
+	
+	public Node(String cityName, List<Node> children){
+		this.cityName = cityName;
+		this.chidlNode = children;
+	}
+
+	public String getCityName() {
+		return cityName;
+	}
+
+	public void setCityName(String cityName) {
+		this.cityName = cityName;
+	}
+
+	public List<Node> getChidlNode() {
+		return chidlNode;
+	}
+
+	public void setChidlNode(List<Node> chidlNode) {
+		this.chidlNode = chidlNode;
+	}
+	
+}
